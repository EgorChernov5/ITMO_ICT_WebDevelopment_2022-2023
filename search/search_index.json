{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to my doc! Some information: Name: Chernov Egor Konstantinovich University: ITMO, 09.03.03 Group: k33401 Contacts: vk.com , telgram Completed labs: Lab 1 - Work with sockets. Lab 2 - Create a site on Djando. Lab 3 - Work with Django REST Framework. Server side, API. Lab 4 - Work with Vue.JS. Client side. Practical works: PW 3.1 - Django Web framework PW 3.2 - Django rest framework PW 3.3 - Documentation","title":"Home"},{"location":"#welcome-to-my-doc","text":"","title":"Welcome to my doc!"},{"location":"#some-information","text":"Name: Chernov Egor Konstantinovich University: ITMO, 09.03.03 Group: k33401 Contacts: vk.com , telgram","title":"Some information:"},{"location":"#completed-labs","text":"Lab 1 - Work with sockets. Lab 2 - Create a site on Djando. Lab 3 - Work with Django REST Framework. Server side, API. Lab 4 - Work with Vue.JS. Client side.","title":"Completed labs:"},{"location":"#practical-works","text":"PW 3.1 - Django Web framework PW 3.2 - Django rest framework PW 3.3 - Documentation","title":"Practical works:"},{"location":"Lr1/lr1-tasks/","text":"Task 1 ServerSide.py import socket sock = socket.socket() # if \"127.0.0.1\" - connect only my cp host, if \"0.0.0.0\"- connect all hosts # 8080 - port sock.bind((\"\", 8080)) # set listening and queue size sock.listen(1) # accept() return client socket and client address # \u0410\u0434\u0440\u0435\u0441 \u2014 \u043c\u0430\u0441\u0441\u0438\u0432, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u0438\u0437 IP-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u043f\u043e\u0440\u0442\u0430 conn, addr = sock.accept() # get data data = conn.recv(16384) decodeData = data.decode(\"utf-8\") print(\"Server: \" + decodeData) # two ways for send data, in both ways data should be encoded massage = \"Hello, client\" # conn.send(b\"Hello, client\\n\") conn.send(massage.encode(\"utf-8\")) # close connection conn.close() ClientSide.py import socket sock = socket.socket() # connect to port which is listening server sock.connect((\"127.0.0.1\", 8080)) massage = \"Hello, server\" sock.send(massage.encode(\"utf-8\")) data = sock.recv(16384) decodeData = data.decode(\"utf-8\") print(\"Client: \" + decodeData) Task 2 ServerSide.py import socket import math def math_square(m_data): split_str = m_data.split() if split_str[0] == \"a\": return int(split_str[1]) * int(split_str[2]) elif split_str[0] == \"b\": return int(split_str[1]) * int(split_str[2]) * math.sin(math.radians(int(split_str[3]))) elif split_str[0] == \"c\": return (1 / 2) * int(split_str[1]) * int(split_str[2]) * math.sin(math.radians(int(split_str[3]))) else: return 0 sock = socket.socket() sock.bind((\"\", 8080)) sock.listen(1) conn, addr = sock.accept() try: while 1: try: conn.settimeout(10) data = conn.recv(16384) if not data: break decoded_data = data.decode(\"utf-8\") massage_out = str(math_square(decoded_data)) conn.send(massage_out.encode(\"utf-8\")) except socket.error: print(\"connection timed out\") break finally: conn.close() finally: sock.close() ClientSide.py import socket sock = socket.socket() sock.connect((\"127.0.0.1\", 8080)) massage = input(\"Which formula do you prefer?\\na. S = a*h\\nb. S = a*b*sin(a^b)\\n\" \"c. S = 0.5*d1*d2+sin(d1^d2)\\nInput latter and params: \") sock.send(massage.encode(\"utf-8\")) sock.settimeout(1) data = sock.recv(16384) decodeData = data.decode(\"utf-8\") print(\"Answer: \" + decodeData) Task 3 ServerSide.py import socket import os with socket.socket() as s: s.bind(('', 8080)) s.listen(1) conn, addr = s.accept() with conn: work_path = os.getcwd() res_path = ('\\\\'.join(work_path.split('\\\\')[:-1]) + '\\\\res\\\\index.html').replace('\\\\', '/') with open(res_path) as fin: message = fin.read() print(conn.recv(16348).decode('utf-8')) response = 'HTTP/1.0 200 OK\\n\\n' + message conn.sendall(response.encode('utf-8')) ClientSide.py import socket with socket.socket() as s: s.connect(('127.0.0.1', 8080)) s.settimeout(5) s.send(b\"GET / HTTP/1.1\\n\") data = s.recv(16384) decodeData = data.decode('utf-8') print(decodeData) index.html <!doctype html> <html> <head> <meta charset=\"utf-8\"> <title>Title</title> </head> <body> <h1>My first title</h1> <p>My first article</p> </body> </html> Task 4 ServerSide.py import socket import threading def accept(): while 1: try: conn, addr = s.accept() print(f\"New user {conn.getpeername()[1]} was added\") conn.send(b\"...Write \\\"/exit\\\" for live this chat...\\n\") message = f\"...New member: {addr[1]}...\\n\" for user in users: user.send(message.encode('utf-8')) users.append(conn) # Start a thread which receives messages t_in = threading.Thread(target=in_data, name='in', args=(conn,)) t_in.start() except socket.error: break def in_data(t_conn): t_user = t_conn.getpeername()[1] while 1: try: data = t_conn.recv(1024) decode_data = data.decode('utf-8') # Start a thread which sends messages t_out = threading.Thread(target=out_data, name='out', args=(t_conn, decode_data, ), daemon=True) t_out.start() t_out.join() except socket.error: print(f\"User {t_user} left\") break def out_data(t_conn, message): t_user = t_conn.getpeername()[1] if message == '/exit': users.remove(t_conn) specific_message = f\"...User {t_user} left...\\n\".encode('utf-8') t_conn.close() else: specific_message = f\"User {t_user}: {message}\".encode('utf-8') for user in users: if user == t_conn: continue user.send(specific_message) if __name__ == \"__main__\": with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: host = '' port = 8080 s.bind((host, port)) s.listen(5) users = [] print('Chat\\'s started') # Start a thread which accepts sockets t_accept = threading.Thread(target=accept, name='accept', daemon=True) t_accept.start() while 1: # Checking server shutdown check = input('Write \\\"/terminate\\\" to stop this chat\\n') if check == '/terminate': s.close() print('Chat\\' stopped') break User1.py import socket import threading import time def out_data(): time.sleep(2) m = 'Hi, i\\'m 0\\n' s.send(m.encode('utf-8')) print(f'You ({s.getsockname()[1]}): {m}') time.sleep(5) m = 'What?\\n' s.send(m.encode('utf-8')) print(f'You ({s.getsockname()[1]}): {m}') time.sleep(4) m = 'No, it\\'s you!\\n' s.send(m.encode('utf-8')) print(f'You ({s.getsockname()[1]}): No, {m}') time.sleep(5) s.send(b'/exit') if __name__ == \"__main__\": with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: host = '127.0.0.1' port = 8080 s.connect((host, port)) t = threading.Thread(target=out_data, name='out', daemon=True) i = 1 while 1: try: in_data = s.recv(1024) decodeData = in_data.decode(\"utf-8\") if not in_data: print('You left the chat') break print(decodeData) if i: print('You have joined the chat') t.start() i -= 1 except socket.error: print('Server was terminated') break User2.py import socket import threading import time def out_data(): time.sleep(2) m = 'Hiii, i\\'m 1\\n' s.send(m.encode('utf-8')) print(f'You ({s.getsockname()[1]}): {m}') m = 'Sgsvd...\\n' s.send(m.encode('utf-8')) print(f'You ({s.getsockname()[1]}): {m}') time.sleep(4) m = 'You loser?\\n' s.send(m.encode('utf-8')) print(f'You ({s.getsockname()[1]}): {m}') time.sleep(5) s.send(b'/exit') if __name__ == \"__main__\": with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: host = '127.0.0.1' port = 8080 s.connect((host, port)) t = threading.Thread(target=out_data, name='out', daemon=True) i = 1 while 1: try: in_data = s.recv(1024) decodeData = in_data.decode(\"utf-8\") if not in_data: print('You left the chat') break print(decodeData) if i: print('You have joined the chat') t.start() i -= 1 except socket.error: print('Server was terminated') break Task 5 MyHTTPServer.py import os import socket from email.parser import Parser from HTTPError import HTTPError from Response import Response from Request import Request MAX_HEADERS = 100 class MyHTTPServer: def __init__(self, host, port): self._host = host self._port = port self._subjects = {} def serve_forever(self): serv_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: serv_sock.bind((self._host, self._port)) serv_sock.listen(1) while True: conn, _ = serv_sock.accept() try: self.serve_client(conn) except Exception as e: print('Client serving failed', e) finally: serv_sock.close() def serve_client(self, conn): try: # Parse request and return Request(method, target, ver, headers, rfile) req = self.parse_request(conn) # Return Response(200, 'OK', headers, body) resp = self.handle_request(req) self.send_response(conn, resp) except Exception as e: self.send_error(conn, e) if conn: req.rfile.close() conn.close() def parse_request(self, conn): rfile = conn.makefile('rb') method, target, ver = self.parse_request_line(rfile) headers = self.parse_headers(rfile) return Request(method, target, ver, headers, rfile) def parse_request_line(self, rfile): raw = rfile.readline() req_line = str(raw, 'utf-8') words = req_line.split() if len(words) != 3: raise HTTPError(400, 'Bad request', ) method, target, ver = words if ver != 'HTTP/1.1': raise HTTPError(505, 'HTTP Version Not Supported') return method, target, ver def parse_headers(self, rfile): headers = [] while True: line = rfile.readline() if line in (b'\\r\\n', b'\\n', b''): break headers.append(line) if len(headers) > MAX_HEADERS: raise HTTPError(494, 'Too many headers') sheaders = b''.join(headers).decode('utf-8') return Parser().parsestr(sheaders) def parse_values(self, req_values): param = req_values.decode('utf-8').split('&') subject = param[0][len('subject='):] grade = param[1][len('grade='):] if not subject or not grade: raise HTTPError(400, 'Bad request', 'Params missing') return subject, grade def handle_request(self, req): if req.target == '/welcome' and req.method == 'GET': return self.handle_get_welcome() if req.method == 'POST': return self.handle_post_subjects(req) if req.target.startswith('/subjects') and req.method == 'GET': return self.handle_get_subjects() raise HTTPError(404, 'Not found') def send_response(self, conn, resp): wfile = conn.makefile('wb') status_line = f'HTTP/1.1 {resp.status} {resp.reason}\\r\\n' wfile.write(status_line.encode('utf-8')) if resp.headers: for (key, value) in resp.headers: header_line = f'{key}: {value}\\r\\n' wfile.write(header_line.encode('utf-8')) wfile.write(b'\\r\\n') if resp.body: wfile.write(resp.body) wfile.flush() wfile.close() def send_error(self, conn, err): try: status = err.status reason = err.reason body = (err.body or err.reason).encode('utf-8') except Exception: status = 500 reason = b'Internal Server Error' body = b'Internal Server Error' resp = Response(status, reason, [('Content-Length', len(body))], body) self.send_response(conn, resp) def handle_get_welcome(self): content_type = 'text/html; charset=utf-8' work_path = os.getcwd() res_path = ('\\\\'.join(work_path.split('\\\\')[:-1]) + '\\\\res\\\\welcome.html').replace('\\\\', '/') with open(res_path) as fin: body = fin.read() body = body.encode('utf-8') headers = [('Content-Type', content_type), ('Content-Length', len(body))] return Response(200, 'OK', headers, body) def handle_post_subjects(self, req): req_values = req.rfile.readline() subject, grade = self.parse_values(req_values) subject_id = len(self._subjects) + 1 self._subjects[subject_id] = {'id': subject_id, 'subject': subject, 'grade': grade} return Response(204, 'Created') def handle_get_subjects(self): content_type = 'text/html; charset=utf-8' body = '<html><head></head><body>' body += f'<div>Count of subjects: {len(self._subjects)}</div>' body += '<ul>' for u in self._subjects.values(): body += f'<li>{u[\"subject\"]}, {u[\"grade\"]}</li>' body += '</ul>' body += '</body></html>' body = body.encode('utf-8') headers = [('Content-Type', content_type), ('Content-Length', len(body))] return Response(200, 'OK', headers, body) if __name__ == '__main__': s_host = '' s_port = 8080 serv = MyHTTPServer(s_host, s_port) try: serv.serve_forever() except KeyboardInterrupt: pass HTTPError.py class HTTPError(Exception): def __init__(self, status, reason, body=None): super() self.status = status self.reason = reason self.body = body Response.py class Response: def __init__(self, status, reason, headers=None, body=None): self.status = status self.reason = reason self.headers = headers self.body = body Request.py class Request: def __init__(self, method, target, version, headers, rfile): self.method = method self.target = target self.version = version self.headers = headers self.rfile = rfile def body(self): size = self.headers.get('Content-Length') if not size: return None return self.rfile.read(size) welcome.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta content=\"text/html\" charset=\"UTF-8\"> <title>List of subjects</title> </head> <body> <h1>List of subjects</h1> <form action=\"\" method=\"POST\"> <p>Write a subject:</p> <input type=\"text\" name=\"subject\" id=\"subject\" placeholder=\"Math\"> <p>Write a grade:</p> <input type=\"text\" name=\"grade\" id=\"grade\" placeholder=\"1-5\"><br> <br> <button type=\"submit\" name=\"add_subject\" id=add_subject\">Add subject</button> </form> <br> <form action=\"/subjects\" method=\"GET\"> <button type=\"submit\" name=\"see_subjects\" id=\"see_subjects\">See subjects</button> </form> </body> </html>","title":"Lab 1"},{"location":"Lr1/lr1-tasks/#task-1","text":"ServerSide.py import socket sock = socket.socket() # if \"127.0.0.1\" - connect only my cp host, if \"0.0.0.0\"- connect all hosts # 8080 - port sock.bind((\"\", 8080)) # set listening and queue size sock.listen(1) # accept() return client socket and client address # \u0410\u0434\u0440\u0435\u0441 \u2014 \u043c\u0430\u0441\u0441\u0438\u0432, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u0438\u0437 IP-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u043f\u043e\u0440\u0442\u0430 conn, addr = sock.accept() # get data data = conn.recv(16384) decodeData = data.decode(\"utf-8\") print(\"Server: \" + decodeData) # two ways for send data, in both ways data should be encoded massage = \"Hello, client\" # conn.send(b\"Hello, client\\n\") conn.send(massage.encode(\"utf-8\")) # close connection conn.close() ClientSide.py import socket sock = socket.socket() # connect to port which is listening server sock.connect((\"127.0.0.1\", 8080)) massage = \"Hello, server\" sock.send(massage.encode(\"utf-8\")) data = sock.recv(16384) decodeData = data.decode(\"utf-8\") print(\"Client: \" + decodeData)","title":"Task 1"},{"location":"Lr1/lr1-tasks/#task-2","text":"ServerSide.py import socket import math def math_square(m_data): split_str = m_data.split() if split_str[0] == \"a\": return int(split_str[1]) * int(split_str[2]) elif split_str[0] == \"b\": return int(split_str[1]) * int(split_str[2]) * math.sin(math.radians(int(split_str[3]))) elif split_str[0] == \"c\": return (1 / 2) * int(split_str[1]) * int(split_str[2]) * math.sin(math.radians(int(split_str[3]))) else: return 0 sock = socket.socket() sock.bind((\"\", 8080)) sock.listen(1) conn, addr = sock.accept() try: while 1: try: conn.settimeout(10) data = conn.recv(16384) if not data: break decoded_data = data.decode(\"utf-8\") massage_out = str(math_square(decoded_data)) conn.send(massage_out.encode(\"utf-8\")) except socket.error: print(\"connection timed out\") break finally: conn.close() finally: sock.close() ClientSide.py import socket sock = socket.socket() sock.connect((\"127.0.0.1\", 8080)) massage = input(\"Which formula do you prefer?\\na. S = a*h\\nb. S = a*b*sin(a^b)\\n\" \"c. S = 0.5*d1*d2+sin(d1^d2)\\nInput latter and params: \") sock.send(massage.encode(\"utf-8\")) sock.settimeout(1) data = sock.recv(16384) decodeData = data.decode(\"utf-8\") print(\"Answer: \" + decodeData)","title":"Task 2"},{"location":"Lr1/lr1-tasks/#task-3","text":"ServerSide.py import socket import os with socket.socket() as s: s.bind(('', 8080)) s.listen(1) conn, addr = s.accept() with conn: work_path = os.getcwd() res_path = ('\\\\'.join(work_path.split('\\\\')[:-1]) + '\\\\res\\\\index.html').replace('\\\\', '/') with open(res_path) as fin: message = fin.read() print(conn.recv(16348).decode('utf-8')) response = 'HTTP/1.0 200 OK\\n\\n' + message conn.sendall(response.encode('utf-8')) ClientSide.py import socket with socket.socket() as s: s.connect(('127.0.0.1', 8080)) s.settimeout(5) s.send(b\"GET / HTTP/1.1\\n\") data = s.recv(16384) decodeData = data.decode('utf-8') print(decodeData) index.html <!doctype html> <html> <head> <meta charset=\"utf-8\"> <title>Title</title> </head> <body> <h1>My first title</h1> <p>My first article</p> </body> </html>","title":"Task 3"},{"location":"Lr1/lr1-tasks/#task-4","text":"ServerSide.py import socket import threading def accept(): while 1: try: conn, addr = s.accept() print(f\"New user {conn.getpeername()[1]} was added\") conn.send(b\"...Write \\\"/exit\\\" for live this chat...\\n\") message = f\"...New member: {addr[1]}...\\n\" for user in users: user.send(message.encode('utf-8')) users.append(conn) # Start a thread which receives messages t_in = threading.Thread(target=in_data, name='in', args=(conn,)) t_in.start() except socket.error: break def in_data(t_conn): t_user = t_conn.getpeername()[1] while 1: try: data = t_conn.recv(1024) decode_data = data.decode('utf-8') # Start a thread which sends messages t_out = threading.Thread(target=out_data, name='out', args=(t_conn, decode_data, ), daemon=True) t_out.start() t_out.join() except socket.error: print(f\"User {t_user} left\") break def out_data(t_conn, message): t_user = t_conn.getpeername()[1] if message == '/exit': users.remove(t_conn) specific_message = f\"...User {t_user} left...\\n\".encode('utf-8') t_conn.close() else: specific_message = f\"User {t_user}: {message}\".encode('utf-8') for user in users: if user == t_conn: continue user.send(specific_message) if __name__ == \"__main__\": with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: host = '' port = 8080 s.bind((host, port)) s.listen(5) users = [] print('Chat\\'s started') # Start a thread which accepts sockets t_accept = threading.Thread(target=accept, name='accept', daemon=True) t_accept.start() while 1: # Checking server shutdown check = input('Write \\\"/terminate\\\" to stop this chat\\n') if check == '/terminate': s.close() print('Chat\\' stopped') break User1.py import socket import threading import time def out_data(): time.sleep(2) m = 'Hi, i\\'m 0\\n' s.send(m.encode('utf-8')) print(f'You ({s.getsockname()[1]}): {m}') time.sleep(5) m = 'What?\\n' s.send(m.encode('utf-8')) print(f'You ({s.getsockname()[1]}): {m}') time.sleep(4) m = 'No, it\\'s you!\\n' s.send(m.encode('utf-8')) print(f'You ({s.getsockname()[1]}): No, {m}') time.sleep(5) s.send(b'/exit') if __name__ == \"__main__\": with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: host = '127.0.0.1' port = 8080 s.connect((host, port)) t = threading.Thread(target=out_data, name='out', daemon=True) i = 1 while 1: try: in_data = s.recv(1024) decodeData = in_data.decode(\"utf-8\") if not in_data: print('You left the chat') break print(decodeData) if i: print('You have joined the chat') t.start() i -= 1 except socket.error: print('Server was terminated') break User2.py import socket import threading import time def out_data(): time.sleep(2) m = 'Hiii, i\\'m 1\\n' s.send(m.encode('utf-8')) print(f'You ({s.getsockname()[1]}): {m}') m = 'Sgsvd...\\n' s.send(m.encode('utf-8')) print(f'You ({s.getsockname()[1]}): {m}') time.sleep(4) m = 'You loser?\\n' s.send(m.encode('utf-8')) print(f'You ({s.getsockname()[1]}): {m}') time.sleep(5) s.send(b'/exit') if __name__ == \"__main__\": with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: host = '127.0.0.1' port = 8080 s.connect((host, port)) t = threading.Thread(target=out_data, name='out', daemon=True) i = 1 while 1: try: in_data = s.recv(1024) decodeData = in_data.decode(\"utf-8\") if not in_data: print('You left the chat') break print(decodeData) if i: print('You have joined the chat') t.start() i -= 1 except socket.error: print('Server was terminated') break","title":"Task 4"},{"location":"Lr1/lr1-tasks/#task-5","text":"MyHTTPServer.py import os import socket from email.parser import Parser from HTTPError import HTTPError from Response import Response from Request import Request MAX_HEADERS = 100 class MyHTTPServer: def __init__(self, host, port): self._host = host self._port = port self._subjects = {} def serve_forever(self): serv_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: serv_sock.bind((self._host, self._port)) serv_sock.listen(1) while True: conn, _ = serv_sock.accept() try: self.serve_client(conn) except Exception as e: print('Client serving failed', e) finally: serv_sock.close() def serve_client(self, conn): try: # Parse request and return Request(method, target, ver, headers, rfile) req = self.parse_request(conn) # Return Response(200, 'OK', headers, body) resp = self.handle_request(req) self.send_response(conn, resp) except Exception as e: self.send_error(conn, e) if conn: req.rfile.close() conn.close() def parse_request(self, conn): rfile = conn.makefile('rb') method, target, ver = self.parse_request_line(rfile) headers = self.parse_headers(rfile) return Request(method, target, ver, headers, rfile) def parse_request_line(self, rfile): raw = rfile.readline() req_line = str(raw, 'utf-8') words = req_line.split() if len(words) != 3: raise HTTPError(400, 'Bad request', ) method, target, ver = words if ver != 'HTTP/1.1': raise HTTPError(505, 'HTTP Version Not Supported') return method, target, ver def parse_headers(self, rfile): headers = [] while True: line = rfile.readline() if line in (b'\\r\\n', b'\\n', b''): break headers.append(line) if len(headers) > MAX_HEADERS: raise HTTPError(494, 'Too many headers') sheaders = b''.join(headers).decode('utf-8') return Parser().parsestr(sheaders) def parse_values(self, req_values): param = req_values.decode('utf-8').split('&') subject = param[0][len('subject='):] grade = param[1][len('grade='):] if not subject or not grade: raise HTTPError(400, 'Bad request', 'Params missing') return subject, grade def handle_request(self, req): if req.target == '/welcome' and req.method == 'GET': return self.handle_get_welcome() if req.method == 'POST': return self.handle_post_subjects(req) if req.target.startswith('/subjects') and req.method == 'GET': return self.handle_get_subjects() raise HTTPError(404, 'Not found') def send_response(self, conn, resp): wfile = conn.makefile('wb') status_line = f'HTTP/1.1 {resp.status} {resp.reason}\\r\\n' wfile.write(status_line.encode('utf-8')) if resp.headers: for (key, value) in resp.headers: header_line = f'{key}: {value}\\r\\n' wfile.write(header_line.encode('utf-8')) wfile.write(b'\\r\\n') if resp.body: wfile.write(resp.body) wfile.flush() wfile.close() def send_error(self, conn, err): try: status = err.status reason = err.reason body = (err.body or err.reason).encode('utf-8') except Exception: status = 500 reason = b'Internal Server Error' body = b'Internal Server Error' resp = Response(status, reason, [('Content-Length', len(body))], body) self.send_response(conn, resp) def handle_get_welcome(self): content_type = 'text/html; charset=utf-8' work_path = os.getcwd() res_path = ('\\\\'.join(work_path.split('\\\\')[:-1]) + '\\\\res\\\\welcome.html').replace('\\\\', '/') with open(res_path) as fin: body = fin.read() body = body.encode('utf-8') headers = [('Content-Type', content_type), ('Content-Length', len(body))] return Response(200, 'OK', headers, body) def handle_post_subjects(self, req): req_values = req.rfile.readline() subject, grade = self.parse_values(req_values) subject_id = len(self._subjects) + 1 self._subjects[subject_id] = {'id': subject_id, 'subject': subject, 'grade': grade} return Response(204, 'Created') def handle_get_subjects(self): content_type = 'text/html; charset=utf-8' body = '<html><head></head><body>' body += f'<div>Count of subjects: {len(self._subjects)}</div>' body += '<ul>' for u in self._subjects.values(): body += f'<li>{u[\"subject\"]}, {u[\"grade\"]}</li>' body += '</ul>' body += '</body></html>' body = body.encode('utf-8') headers = [('Content-Type', content_type), ('Content-Length', len(body))] return Response(200, 'OK', headers, body) if __name__ == '__main__': s_host = '' s_port = 8080 serv = MyHTTPServer(s_host, s_port) try: serv.serve_forever() except KeyboardInterrupt: pass HTTPError.py class HTTPError(Exception): def __init__(self, status, reason, body=None): super() self.status = status self.reason = reason self.body = body Response.py class Response: def __init__(self, status, reason, headers=None, body=None): self.status = status self.reason = reason self.headers = headers self.body = body Request.py class Request: def __init__(self, method, target, version, headers, rfile): self.method = method self.target = target self.version = version self.headers = headers self.rfile = rfile def body(self): size = self.headers.get('Content-Length') if not size: return None return self.rfile.read(size) welcome.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta content=\"text/html\" charset=\"UTF-8\"> <title>List of subjects</title> </head> <body> <h1>List of subjects</h1> <form action=\"\" method=\"POST\"> <p>Write a subject:</p> <input type=\"text\" name=\"subject\" id=\"subject\" placeholder=\"Math\"> <p>Write a grade:</p> <input type=\"text\" name=\"grade\" id=\"grade\" placeholder=\"1-5\"><br> <br> <button type=\"submit\" name=\"add_subject\" id=add_subject\">Add subject</button> </form> <br> <form action=\"/subjects\" method=\"GET\"> <button type=\"submit\" name=\"see_subjects\" id=\"see_subjects\">See subjects</button> </form> </body> </html>","title":"Task 5"},{"location":"Lr2/lr2-tasks/","text":"Structure of project hotel - settings folder account - authentication and registration app hotel_first_app - main app templates - folder with html files hotel settings.py Add configurations: INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'hotel_first_app.apps.HotelFirstAppConfig', 'account.apps.AccountConfig' ] Set path to templates folder: TEMPLATES = [ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [BASE_DIR / 'templates'], 'APP_DIRS': True, 'OPTIONS': { 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, }, ] Change configurations for database: DATABASES = { 'default': { \"ENGINE\": \"django.db.backends.postgresql\", \"NAME\": \"django_hotel\", \"USER\": \"postgres\", \"PASSWORD\": \"Rabotadb123\", \"HOST\": \"localhost\", \"PORT\": \"5433\", } } Set auth user: AUTH_USER_MODEL = 'Account.User' urls.py from django.contrib import admin from django.urls import include, path urlpatterns = [ path('admin/', admin.site.urls), path('', include('account.urls')), ] account models.py from django.contrib.auth.models import AbstractUser class User(AbstractUser): pass urls.py from django.urls import path, include from .views import * urlpatterns = [ path('', RegView.as_view(), name='index'), path('error/', error, name='error'), path('login/', LogInView.as_view(), name='login'), path('logout/', LogOutView.as_view(), name='logout'), path('hotels/', include('hotel_first_app.urls')), path('account/<int:pk>/', AccountUserView.as_view(), name='account'), path('account/<int:id_user>/update/<int:pk>', UpdateReserveView.as_view(), name='update_reserve'), path('account/<int:id_user>/delete/<int:pk>', ReserveDeleteView.as_view(), name='delete_reserve'), ] views.py from django.contrib.auth import authenticate, login from django.contrib.auth.models import User from django.contrib.auth.views import LoginView, LogoutView from django.shortcuts import render, redirect from django.urls import reverse_lazy from django.views.generic import CreateView, UpdateView, DeleteView from datetime import date from .forms import * from hotel_first_app.models import Registration class ReserveDeleteView(DeleteView): model = Registration template_name = 'delete_reserve.html' success_url = '/hotels/hotels/' class UpdateReserveView(UpdateView): form_class = UpdateReserveForm template_name = 'update_reserve.html' context_object_name = 'reg' def get_queryset(self): self.success_url = f\"/account/{self.kwargs['id_user']}\" return Registration.objects.filter(pk=self.kwargs['pk']) class AccountUserView(UpdateView): form_class = AccountForm template_name = 'account.html' def get_context_data(self, **kwargs): context = super(AccountUserView, self).get_context_data(**kwargs) cur_date = date.today() month_ago_date = cur_date.replace(month=(cur_date.month - 1)) context['month_registrations'] = Registration.objects.filter(check_out__gte=month_ago_date) context['taken_registrations'] = Registration.objects.filter(status_reg=\"T\") context['booked_registrations'] = Registration.objects.filter(status_reg=\"B\") context['guest_registrations'] = Registration.objects.filter(id_guest=self.kwargs['pk']) context['guests'] = User.objects.filter(is_superuser=False) return context def get_queryset(self): self.success_url = f\"/account/{self.kwargs['pk']}\" return User.objects.filter(pk=self.kwargs['pk']) def error(request): return render(request, 'error.html') class RegView(CreateView): form_class = CustomUserCreationForm template_name = 'index.html' success_url = 'hotels' def post(self, request, *args, **kwargs): form = CustomUserCreationForm(request.POST) context = {'username': \"\"} if form.is_valid(): form.save() context['username'] = form.cleaned_data.get('username') user = authenticate(username=form.cleaned_data.get('username'), password=form.cleaned_data.get('password1')) login(request, user) return redirect('hotels') return render(request, 'error.html') class LogInView(LoginView): form_class = CustomAuthenticationForm template_name = 'login.html' def get_success_url(self): return reverse_lazy('hotels') class LogOutView(LogoutView): def get_success_url(self): return reverse_lazy('index') forms.py from django import forms from django.contrib.auth.forms import UserCreationForm, AuthenticationForm from .models import User from hotel_first_app.models import Registration class UpdateReserveForm(forms.ModelForm): class Meta: model = Registration fields = ('id_reg', 'id_employee', 'id_guest', 'id_room', 'status_reg', 'status_pay', 'check_in', 'check_out', 'booking') class AccountForm(forms.ModelForm): class Meta: model = User fields = ('username', 'first_name', 'last_name', 'email') class CustomUserCreationForm(UserCreationForm): class Meta: model = User fields = ('username', 'email',) class CustomAuthenticationForm(AuthenticationForm): class Meta: model = User fields = ('username', 'password') hotel_first_app models.py from django.db import models from django.core.validators import MinValueValidator, MaxValueValidator from account.models import User class Hotel(models.Model): id_hotel = models.IntegerField(primary_key=True, verbose_name='ID Hotel') name_hotel = models.CharField(max_length=100, verbose_name='Name') city_hotel = models.CharField(max_length=30, verbose_name='City') address_hotel = models.CharField(max_length=255, verbose_name='Address') rating_hotel = models.PositiveSmallIntegerField(validators=[MinValueValidator(1), MaxValueValidator(10)], null=True, blank=True, verbose_name='Rating') des_hotel = models.CharField(max_length=255, null=True, blank=True, verbose_name='Description') class Employee(models.Model): id_employee = models.IntegerField(primary_key=True, verbose_name='ID Employee') id_hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE, verbose_name='ID Hotel') first_name_employee = models.CharField(max_length=30, verbose_name='First name') last_name_employee = models.CharField(max_length=30, verbose_name='Last name') phone_employee = models.CharField(max_length=12, verbose_name='Phone') class Meta: ordering = [\"first_name_employee\", \"last_name_employee\"] class RoomType(models.Model): ECONOM = 'E' STANDARD = 'S' LUX = 'L' TYPE_CHOICES = [ (ECONOM, 'Econom'), (STANDARD, 'Standard'), (LUX, 'Lux'), ] id_rt = models.IntegerField(primary_key=True, verbose_name='ID Room type') id_hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE, verbose_name='ID Hotel') type_rt = models.CharField(max_length=1, choices=TYPE_CHOICES, verbose_name='Type') rating_rt = models.PositiveSmallIntegerField(validators=[MinValueValidator(1), MaxValueValidator(10)], null=True, blank=True, verbose_name='Rating') price_rt = models.PositiveIntegerField(verbose_name='Price') des_rt = models.CharField(max_length=255, null=True, blank=True, verbose_name='Description') class Meta: ordering = [\"id_rt\"] class Room(models.Model): FREE = 'F' TAKEN = 'T' BOOKED = 'B' STATUS_CHOICES = [ (FREE, 'Free'), (TAKEN, 'Taken'), (BOOKED, 'Booked'), ] id_room = models.IntegerField(primary_key=True, verbose_name='ID Room') id_hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE, verbose_name='ID Hotel') id_rt = models.ForeignKey(RoomType, on_delete=models.SET_NULL, null=True, verbose_name='ID Room type') number_room = models.IntegerField(verbose_name='Number') status_room = models.CharField(max_length=1, choices=STATUS_CHOICES, default='F', verbose_name='Status') review_room = models.CharField(max_length=255, null=True, blank=True, verbose_name='Review') class Meta: ordering = [\"number_room\"] class Registration(models.Model): TAKEN = 'T' BOOKED = 'B' PAID = 'YP' NO_PAID = 'NP' STATUS_REG_CHOICES = [ (TAKEN, 'Taken'), (BOOKED, 'Booked'), ] STATUS_PAY_CHOICES = [ (PAID, 'Paid for'), (NO_PAID, 'Not paid for'), ] id_reg = models.IntegerField(primary_key=True, verbose_name='ID Reg') id_employee = models.ForeignKey(Employee, on_delete=models.SET_NULL, null=True, verbose_name='ID Employee') id_guest = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, verbose_name='ID Guest') id_room = models.ForeignKey(Room, on_delete=models.SET_NULL, null=True, verbose_name='ID Room') status_reg = models.CharField(max_length=1, choices=STATUS_REG_CHOICES, verbose_name='Registration status') status_pay = models.CharField(max_length=2, choices=STATUS_PAY_CHOICES, verbose_name='Payment status') check_in = models.DateField(null=False, blank=False, verbose_name='Check in') check_out = models.DateField(null=False, blank=False, verbose_name='Check out') booking = models.DateField(null=False, blank=False, verbose_name='Booking date') class Meta: ordering = [\"-check_in\", \"-check_out\"] class Comment(models.Model): id_guest = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, verbose_name='ID Guest') id_room = models.ForeignKey(Room, on_delete=models.CASCADE, null=True, verbose_name='ID Room') username = models.CharField(max_length=30) rating_c = models.PositiveSmallIntegerField(validators=[MinValueValidator(1), MaxValueValidator(10)], verbose_name='Rating') review_c = models.TextField(max_length=255, null=True, blank=True, verbose_name='Review') check_in = models.DateField(null=False, blank=False, verbose_name='Check in') check_out = models.DateField(null=False, blank=False, verbose_name='Check out') urls.py from django.urls import path from .views import * urlpatterns = [ path('hotels/', HotelListView.as_view(), name='hotels'), path('hotels/<int:pk>/', HotelView.as_view(), name='hotel'), path('hotels/<int:id_hotel>/<int:id_rt>/rooms/', RoomListView.as_view(), name='hotel-rooms'), path('hotels/<int:id_hotel>/<int:id_rt>/rooms/<int:pk>/', RoomView.as_view(), name='room'), path('hotels/<int:id_hotel>/<int:id_rt>/rooms/<int:id_room>/comment/', CommentView.as_view(), name='comment'), path('reserve/', ReserveView.as_view(), name='reserve'), ] views.py from django.shortcuts import render, redirect from django.views.generic import CreateView, ListView, DetailView from .forms import * from .models import * class ReserveView(CreateView): form_class = ReserveForm template_name = 'reserve.html' def post(self, request, *args, **kwargs): form = ReserveForm(request.POST) if form.is_valid(): form.save() print(request) return redirect('hotels') return render(request, 'error.html') class CommentView(CreateView): form_class = CommentForm template_name = 'comment.html' def get_context_data(self, **kwargs): context = super(CommentView, self).get_context_data(**kwargs) context['hotel'] = Hotel.objects.get(pk=self.kwargs['id_hotel']) context['room_type'] = RoomType.objects.get(pk=self.kwargs['id_rt']) context['room'] = Room.objects.get(pk=self.kwargs['id_room']) return context def get(self, request, *args, **kwargs): form = CommentForm() context = {'form': form, 'hotel': Hotel.objects.get(pk=self.kwargs['id_hotel']), 'room_type': RoomType.objects.get(pk=self.kwargs['id_rt']), 'room': Room.objects.get(pk=self.kwargs['id_room'])} return render(request, 'comment.html', context) def post(self, request, *args, **kwargs): form = CommentForm(request.POST) if form.is_valid(): form.save() print(request) return redirect('room', id_hotel=self.kwargs['id_hotel'], id_rt=self.kwargs['id_rt'], pk=self.kwargs['id_room']) return render(request, 'error.html') class RoomView(DetailView): model = Room template_name = 'room.html' context_object_name = 'room' def get_context_data(self, **kwargs): context = super(RoomView, self).get_context_data(**kwargs) context['hotel'] = Hotel.objects.get(pk=self.kwargs['id_hotel']) context['room_type'] = RoomType.objects.get(pk=self.kwargs['id_rt']) context['comments'] = Comment.objects.filter(id_room=self.kwargs['pk']) return context class RoomListView(ListView): model = Room template_name = 'rooms.html' context_object_name = 'rooms' def get_context_data(self, **kwargs): context = super(RoomListView, self).get_context_data(**kwargs) context['hotel'] = Hotel.objects.get(pk=self.kwargs['id_hotel']) context['room_type'] = RoomType.objects.get(pk=self.kwargs['id_rt']) return context def get_queryset(self): return Room.objects.filter(id_rt=self.kwargs['id_rt']) class HotelView(DetailView): model = Hotel template_name = 'hotel.html' context_object_name = 'hotel' def get_context_data(self, **kwargs): context = super(HotelView, self).get_context_data(**kwargs) context['room_types'] = RoomType.objects.filter(id_hotel=self.kwargs['pk']) return context class HotelListView(ListView): model = Hotel template_name = 'hotels.html' context_object_name = 'hotels' def get_context_data(self, *, object_list=None, **kwargs): context = super(HotelListView, self).get_context_data(**kwargs) return context forms.py from django import forms from .models import Comment from .models import Registration class ReserveForm(forms.ModelForm): class Meta: model = Registration fields = ('id_reg', 'id_employee', 'id_guest', 'id_room', 'status_reg', 'status_pay', 'check_in', 'check_out', 'booking') class CommentForm(forms.ModelForm): class Meta: model = Comment fields = ('id_guest', 'id_room', 'username', 'rating_c', 'review_c', 'check_in', 'check_out')","title":"Lab 2"},{"location":"Lr2/lr2-tasks/#structure-of-project","text":"hotel - settings folder account - authentication and registration app hotel_first_app - main app templates - folder with html files","title":"Structure of project"},{"location":"Lr2/lr2-tasks/#hotel","text":"settings.py Add configurations: INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'hotel_first_app.apps.HotelFirstAppConfig', 'account.apps.AccountConfig' ] Set path to templates folder: TEMPLATES = [ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [BASE_DIR / 'templates'], 'APP_DIRS': True, 'OPTIONS': { 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, }, ] Change configurations for database: DATABASES = { 'default': { \"ENGINE\": \"django.db.backends.postgresql\", \"NAME\": \"django_hotel\", \"USER\": \"postgres\", \"PASSWORD\": \"Rabotadb123\", \"HOST\": \"localhost\", \"PORT\": \"5433\", } } Set auth user: AUTH_USER_MODEL = 'Account.User' urls.py from django.contrib import admin from django.urls import include, path urlpatterns = [ path('admin/', admin.site.urls), path('', include('account.urls')), ]","title":"hotel"},{"location":"Lr2/lr2-tasks/#account","text":"models.py from django.contrib.auth.models import AbstractUser class User(AbstractUser): pass urls.py from django.urls import path, include from .views import * urlpatterns = [ path('', RegView.as_view(), name='index'), path('error/', error, name='error'), path('login/', LogInView.as_view(), name='login'), path('logout/', LogOutView.as_view(), name='logout'), path('hotels/', include('hotel_first_app.urls')), path('account/<int:pk>/', AccountUserView.as_view(), name='account'), path('account/<int:id_user>/update/<int:pk>', UpdateReserveView.as_view(), name='update_reserve'), path('account/<int:id_user>/delete/<int:pk>', ReserveDeleteView.as_view(), name='delete_reserve'), ] views.py from django.contrib.auth import authenticate, login from django.contrib.auth.models import User from django.contrib.auth.views import LoginView, LogoutView from django.shortcuts import render, redirect from django.urls import reverse_lazy from django.views.generic import CreateView, UpdateView, DeleteView from datetime import date from .forms import * from hotel_first_app.models import Registration class ReserveDeleteView(DeleteView): model = Registration template_name = 'delete_reserve.html' success_url = '/hotels/hotels/' class UpdateReserveView(UpdateView): form_class = UpdateReserveForm template_name = 'update_reserve.html' context_object_name = 'reg' def get_queryset(self): self.success_url = f\"/account/{self.kwargs['id_user']}\" return Registration.objects.filter(pk=self.kwargs['pk']) class AccountUserView(UpdateView): form_class = AccountForm template_name = 'account.html' def get_context_data(self, **kwargs): context = super(AccountUserView, self).get_context_data(**kwargs) cur_date = date.today() month_ago_date = cur_date.replace(month=(cur_date.month - 1)) context['month_registrations'] = Registration.objects.filter(check_out__gte=month_ago_date) context['taken_registrations'] = Registration.objects.filter(status_reg=\"T\") context['booked_registrations'] = Registration.objects.filter(status_reg=\"B\") context['guest_registrations'] = Registration.objects.filter(id_guest=self.kwargs['pk']) context['guests'] = User.objects.filter(is_superuser=False) return context def get_queryset(self): self.success_url = f\"/account/{self.kwargs['pk']}\" return User.objects.filter(pk=self.kwargs['pk']) def error(request): return render(request, 'error.html') class RegView(CreateView): form_class = CustomUserCreationForm template_name = 'index.html' success_url = 'hotels' def post(self, request, *args, **kwargs): form = CustomUserCreationForm(request.POST) context = {'username': \"\"} if form.is_valid(): form.save() context['username'] = form.cleaned_data.get('username') user = authenticate(username=form.cleaned_data.get('username'), password=form.cleaned_data.get('password1')) login(request, user) return redirect('hotels') return render(request, 'error.html') class LogInView(LoginView): form_class = CustomAuthenticationForm template_name = 'login.html' def get_success_url(self): return reverse_lazy('hotels') class LogOutView(LogoutView): def get_success_url(self): return reverse_lazy('index') forms.py from django import forms from django.contrib.auth.forms import UserCreationForm, AuthenticationForm from .models import User from hotel_first_app.models import Registration class UpdateReserveForm(forms.ModelForm): class Meta: model = Registration fields = ('id_reg', 'id_employee', 'id_guest', 'id_room', 'status_reg', 'status_pay', 'check_in', 'check_out', 'booking') class AccountForm(forms.ModelForm): class Meta: model = User fields = ('username', 'first_name', 'last_name', 'email') class CustomUserCreationForm(UserCreationForm): class Meta: model = User fields = ('username', 'email',) class CustomAuthenticationForm(AuthenticationForm): class Meta: model = User fields = ('username', 'password')","title":"account"},{"location":"Lr2/lr2-tasks/#hotel_first_app","text":"models.py from django.db import models from django.core.validators import MinValueValidator, MaxValueValidator from account.models import User class Hotel(models.Model): id_hotel = models.IntegerField(primary_key=True, verbose_name='ID Hotel') name_hotel = models.CharField(max_length=100, verbose_name='Name') city_hotel = models.CharField(max_length=30, verbose_name='City') address_hotel = models.CharField(max_length=255, verbose_name='Address') rating_hotel = models.PositiveSmallIntegerField(validators=[MinValueValidator(1), MaxValueValidator(10)], null=True, blank=True, verbose_name='Rating') des_hotel = models.CharField(max_length=255, null=True, blank=True, verbose_name='Description') class Employee(models.Model): id_employee = models.IntegerField(primary_key=True, verbose_name='ID Employee') id_hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE, verbose_name='ID Hotel') first_name_employee = models.CharField(max_length=30, verbose_name='First name') last_name_employee = models.CharField(max_length=30, verbose_name='Last name') phone_employee = models.CharField(max_length=12, verbose_name='Phone') class Meta: ordering = [\"first_name_employee\", \"last_name_employee\"] class RoomType(models.Model): ECONOM = 'E' STANDARD = 'S' LUX = 'L' TYPE_CHOICES = [ (ECONOM, 'Econom'), (STANDARD, 'Standard'), (LUX, 'Lux'), ] id_rt = models.IntegerField(primary_key=True, verbose_name='ID Room type') id_hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE, verbose_name='ID Hotel') type_rt = models.CharField(max_length=1, choices=TYPE_CHOICES, verbose_name='Type') rating_rt = models.PositiveSmallIntegerField(validators=[MinValueValidator(1), MaxValueValidator(10)], null=True, blank=True, verbose_name='Rating') price_rt = models.PositiveIntegerField(verbose_name='Price') des_rt = models.CharField(max_length=255, null=True, blank=True, verbose_name='Description') class Meta: ordering = [\"id_rt\"] class Room(models.Model): FREE = 'F' TAKEN = 'T' BOOKED = 'B' STATUS_CHOICES = [ (FREE, 'Free'), (TAKEN, 'Taken'), (BOOKED, 'Booked'), ] id_room = models.IntegerField(primary_key=True, verbose_name='ID Room') id_hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE, verbose_name='ID Hotel') id_rt = models.ForeignKey(RoomType, on_delete=models.SET_NULL, null=True, verbose_name='ID Room type') number_room = models.IntegerField(verbose_name='Number') status_room = models.CharField(max_length=1, choices=STATUS_CHOICES, default='F', verbose_name='Status') review_room = models.CharField(max_length=255, null=True, blank=True, verbose_name='Review') class Meta: ordering = [\"number_room\"] class Registration(models.Model): TAKEN = 'T' BOOKED = 'B' PAID = 'YP' NO_PAID = 'NP' STATUS_REG_CHOICES = [ (TAKEN, 'Taken'), (BOOKED, 'Booked'), ] STATUS_PAY_CHOICES = [ (PAID, 'Paid for'), (NO_PAID, 'Not paid for'), ] id_reg = models.IntegerField(primary_key=True, verbose_name='ID Reg') id_employee = models.ForeignKey(Employee, on_delete=models.SET_NULL, null=True, verbose_name='ID Employee') id_guest = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, verbose_name='ID Guest') id_room = models.ForeignKey(Room, on_delete=models.SET_NULL, null=True, verbose_name='ID Room') status_reg = models.CharField(max_length=1, choices=STATUS_REG_CHOICES, verbose_name='Registration status') status_pay = models.CharField(max_length=2, choices=STATUS_PAY_CHOICES, verbose_name='Payment status') check_in = models.DateField(null=False, blank=False, verbose_name='Check in') check_out = models.DateField(null=False, blank=False, verbose_name='Check out') booking = models.DateField(null=False, blank=False, verbose_name='Booking date') class Meta: ordering = [\"-check_in\", \"-check_out\"] class Comment(models.Model): id_guest = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, verbose_name='ID Guest') id_room = models.ForeignKey(Room, on_delete=models.CASCADE, null=True, verbose_name='ID Room') username = models.CharField(max_length=30) rating_c = models.PositiveSmallIntegerField(validators=[MinValueValidator(1), MaxValueValidator(10)], verbose_name='Rating') review_c = models.TextField(max_length=255, null=True, blank=True, verbose_name='Review') check_in = models.DateField(null=False, blank=False, verbose_name='Check in') check_out = models.DateField(null=False, blank=False, verbose_name='Check out') urls.py from django.urls import path from .views import * urlpatterns = [ path('hotels/', HotelListView.as_view(), name='hotels'), path('hotels/<int:pk>/', HotelView.as_view(), name='hotel'), path('hotels/<int:id_hotel>/<int:id_rt>/rooms/', RoomListView.as_view(), name='hotel-rooms'), path('hotels/<int:id_hotel>/<int:id_rt>/rooms/<int:pk>/', RoomView.as_view(), name='room'), path('hotels/<int:id_hotel>/<int:id_rt>/rooms/<int:id_room>/comment/', CommentView.as_view(), name='comment'), path('reserve/', ReserveView.as_view(), name='reserve'), ] views.py from django.shortcuts import render, redirect from django.views.generic import CreateView, ListView, DetailView from .forms import * from .models import * class ReserveView(CreateView): form_class = ReserveForm template_name = 'reserve.html' def post(self, request, *args, **kwargs): form = ReserveForm(request.POST) if form.is_valid(): form.save() print(request) return redirect('hotels') return render(request, 'error.html') class CommentView(CreateView): form_class = CommentForm template_name = 'comment.html' def get_context_data(self, **kwargs): context = super(CommentView, self).get_context_data(**kwargs) context['hotel'] = Hotel.objects.get(pk=self.kwargs['id_hotel']) context['room_type'] = RoomType.objects.get(pk=self.kwargs['id_rt']) context['room'] = Room.objects.get(pk=self.kwargs['id_room']) return context def get(self, request, *args, **kwargs): form = CommentForm() context = {'form': form, 'hotel': Hotel.objects.get(pk=self.kwargs['id_hotel']), 'room_type': RoomType.objects.get(pk=self.kwargs['id_rt']), 'room': Room.objects.get(pk=self.kwargs['id_room'])} return render(request, 'comment.html', context) def post(self, request, *args, **kwargs): form = CommentForm(request.POST) if form.is_valid(): form.save() print(request) return redirect('room', id_hotel=self.kwargs['id_hotel'], id_rt=self.kwargs['id_rt'], pk=self.kwargs['id_room']) return render(request, 'error.html') class RoomView(DetailView): model = Room template_name = 'room.html' context_object_name = 'room' def get_context_data(self, **kwargs): context = super(RoomView, self).get_context_data(**kwargs) context['hotel'] = Hotel.objects.get(pk=self.kwargs['id_hotel']) context['room_type'] = RoomType.objects.get(pk=self.kwargs['id_rt']) context['comments'] = Comment.objects.filter(id_room=self.kwargs['pk']) return context class RoomListView(ListView): model = Room template_name = 'rooms.html' context_object_name = 'rooms' def get_context_data(self, **kwargs): context = super(RoomListView, self).get_context_data(**kwargs) context['hotel'] = Hotel.objects.get(pk=self.kwargs['id_hotel']) context['room_type'] = RoomType.objects.get(pk=self.kwargs['id_rt']) return context def get_queryset(self): return Room.objects.filter(id_rt=self.kwargs['id_rt']) class HotelView(DetailView): model = Hotel template_name = 'hotel.html' context_object_name = 'hotel' def get_context_data(self, **kwargs): context = super(HotelView, self).get_context_data(**kwargs) context['room_types'] = RoomType.objects.filter(id_hotel=self.kwargs['pk']) return context class HotelListView(ListView): model = Hotel template_name = 'hotels.html' context_object_name = 'hotels' def get_context_data(self, *, object_list=None, **kwargs): context = super(HotelListView, self).get_context_data(**kwargs) return context forms.py from django import forms from .models import Comment from .models import Registration class ReserveForm(forms.ModelForm): class Meta: model = Registration fields = ('id_reg', 'id_employee', 'id_guest', 'id_room', 'status_reg', 'status_pay', 'check_in', 'check_out', 'booking') class CommentForm(forms.ModelForm): class Meta: model = Comment fields = ('id_guest', 'id_room', 'username', 'rating_c', 'review_c', 'check_in', 'check_out')","title":"hotel_first_app"},{"location":"Lr3/lr3-tasks/","text":"Structure of project hotel - settings of project, include the authentication account_app - user registration hotel_app - interface for hotels, room types and rooms reg_com_app - interface for registration and comment API - description of API documentation hotel settings.py Add configurations: INSTALLED_APPS = [ ..., 'rest_framework', 'drf_yasg', 'corsheaders', 'rest_framework_simplejwt', 'djoser', 'hotel_app', 'account_app', 'reg_com_app', ] MIDDLEWARE = [ ..., 'corsheaders.middleware.CorsMiddleware', ] Change configurations for database: DATABASES = { 'default': { \"ENGINE\": \"django.db.backends.postgresql\", \"NAME\": \"drf_hotel\", \"USER\": \"postgres\", \"PASSWORD\": \"Rabotadb123\", \"HOST\": \"localhost\", \"PORT\": \"5433\", } } Add configurations for rest framework: REST_FRAMEWORK = { 'DEFAULT_RENDERER_CLASSES': [ 'rest_framework.renderers.JSONRenderer', 'rest_framework.renderers.BrowsableAPIRenderer' ], 'DEFAULT_PERMISSION_CLASSES': [ 'rest_framework.permissions.IsAdminUser', 'rest_framework.permissions.AllowAny', ], 'DEFAULT_AUTHENTICATION_CLASSES': [ 'rest_framework_simplejwt.authentication.JWTAuthentication', ], } Add configurations for jwt: SIMPLE_JWT = { 'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30), 'REFRESH_TOKEN_LIFETIME': timedelta(days=1), 'ROTATE_REFRESH_TOKENS': False, 'BLACKLIST_AFTER_ROTATION': False, 'UPDATE_LAST_LOGIN': False, 'ALGORITHM': 'HS256', 'SIGNING_KEY': SECRET_KEY, 'VERIFYING_KEY': None, 'AUDIENCE': None, 'ISSUER': None, 'JWK_URL': None, 'LEEWAY': 0, 'AUTH_HEADER_TYPES': ('Bearer',), 'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION', 'USER_ID_FIELD': 'id', 'USER_ID_CLAIM': 'user_id', 'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule', 'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',), 'TOKEN_TYPE_CLAIM': 'token_type', 'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser', 'JTI_CLAIM': 'jti', 'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp', 'SLIDING_TOKEN_LIFETIME': timedelta(minutes=30), 'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1), } CORS_ALLOW_ALL_ORIGINS = True urls.py Add configurations for documentation (swagger, redoc) and declare path for getting token and authentication: from django.contrib import admin from django.urls import path, include from rest_framework import permissions from drf_yasg.views import get_schema_view from drf_yasg import openapi from rest_framework_simplejwt.views import ( TokenObtainPairView, TokenRefreshView, ) schema_view = get_schema_view( openapi.Info( title=\"API\", default_version='v1', description=\"Description:\", terms_of_service=\"https://drive.google.com/file/d/1QxQo5jln6soFUj6EmOVEo1yauCo375PP/view\", contact=openapi.Contact(email=\"krish19poroh@mail.ru\"), license=openapi.License(name=\"API for the project \\\"Hotel\\\"\"), ), public=True, permission_classes=[permissions.AllowAny, ], ) urlpatterns = [ path('admin/', admin.site.urls), path('doc/swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'), path('doc/redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'), path('auth/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'), path('auth/', include('djoser.urls')), path('auth/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'), path('', include('hotel_app.urls')), ] account_app models.py Add models: from django.db import models from django.contrib.auth.models import User from django.dispatch import receiver from django.db.models.signals import post_save from hotel_app.models import Hotel class Guest(models.Model): user_g = models.OneToOneField(User, on_delete=models.CASCADE, related_name=\"user_guest\", verbose_name='ID User') phone_guest = models.CharField(max_length=10, verbose_name=\"Phone\") passport_guest = models.CharField(max_length=10, null=True, blank=True, verbose_name=\"Passport\") class Employee(models.Model): user_empl = models.OneToOneField(User, on_delete=models.CASCADE, related_name=\"user_employee\", verbose_name='ID User') hotel_empl = models.ForeignKey(Hotel, on_delete=models.CASCADE, null=True, blank=True, related_name=\"hotel_employee\", verbose_name='ID Hotel') phone_employee = models.CharField(max_length=10, verbose_name=\"Phone\") position_employee = models.CharField(max_length=100, verbose_name=\"Position\") @receiver(post_save, sender=User) def create_user_profile(sender, instance, created, **kwargs): if created: Guest.objects.create(user_g=instance) @receiver(post_save, sender=User) def save_user_profile(sender, instance, **kwargs): if instance.is_staff: try: if Guest.objects.get(user_g=instance): Guest.objects.filter(user_g=instance).delete() Employee.objects.create(user_empl=instance) except: print('Employee already exist') else: try: if Employee.objects.all(): if Employee.objects.get(user_empl=instance): Employee.objects.filter(user_empl=instance).delete() except: print('No such employee') permissions.py Create permission: from rest_framework import permissions class IsOwner(permissions.BasePermission): def has_permission(self, request, view): if request.user.is_authenticated: return True return False def has_object_permission(self, request, view, obj): if obj.author == request.user: return True return False views.py Add views: from rest_framework import viewsets from rest_framework.permissions import IsAdminUser, AllowAny from django.contrib.auth.models import User from .serializers import MyUserSerializer from .permissions import IsOwner class UserViewSet(viewsets.ModelViewSet): queryset = User.objects.all() serializer_class = MyUserSerializer def get_permissions(self): if self.action == 'create': self.permission_classes = [AllowAny, ] elif self.action in ('list', 'retrieve', 'update', 'destroy'): self.permission_classes = [IsAdminUser | IsOwner, ] return [permission() for permission in self.permission_classes] serializers.py Add serializers: from rest_framework import serializers from django.contrib.auth.models import User from .models import Guest, Employee class GuestSerializer(serializers.ModelSerializer): class Meta: model = Guest fields = ('phone_guest', 'passport_guest') class EmployeeSerializer(serializers.ModelSerializer): class Meta: model = Employee fields = ('hotel_empl', 'phone_employee', 'position_employee') depth = 1 class MyUserSerializer(serializers.ModelSerializer): user_guest = GuestSerializer(required=False) user_employee = EmployeeSerializer(required=False) class Meta: model = User fields = ('id', 'username', 'first_name', 'last_name', 'email', 'password', 'user_guest', 'user_employee') urls.py Add urls: from django.urls import path from .views import UserViewSet urlpatterns = [ path('user/', UserViewSet.as_view({'get': 'list', 'post': 'create'})), path('user/<int:pk>/', UserViewSet.as_view({'get': 'retrieve', 'put': 'update', 'delete': 'destroy'})), ] hotel_app models.py Add models: from django.db import models from django.core.validators import MinValueValidator, MaxValueValidator class Hotel(models.Model): name_hotel = models.CharField(max_length=100, verbose_name='Name') city_hotel = models.CharField(max_length=100, verbose_name='City') address_hotel = models.CharField(max_length=255, verbose_name='Address') rating_hotel = models.PositiveSmallIntegerField(validators=[MinValueValidator(0), MaxValueValidator(10)], null=True, blank=True, verbose_name='Rating') des_hotel = models.CharField(max_length=255, null=True, blank=True, verbose_name='Description') class RoomType(models.Model): TYPE_CHOICES = [ (\"E\", 'Econom'), (\"S\", 'Standard'), (\"L\", 'Lux'), ] hotel_rt = models.ForeignKey(Hotel, on_delete=models.CASCADE, related_name=\"hotel_room_type\", verbose_name='ID Hotel') type_rt = models.CharField(max_length=1, choices=TYPE_CHOICES, verbose_name='Type') rating_rt = models.PositiveSmallIntegerField(validators=[MinValueValidator(0), MaxValueValidator(10)], null=True, blank=True, verbose_name='Rating') price_rt = models.PositiveIntegerField(verbose_name='Price') des_rt = models.CharField(max_length=255, null=True, blank=True, verbose_name='Description') class Room(models.Model): STATUS_CHOICES = [ (\"F\", 'Free'), (\"T\", 'Taken'), (\"B\", 'Booked'), ] hotel_r = models.ForeignKey(Hotel, on_delete=models.CASCADE, related_name=\"hotel_room\", verbose_name='ID Hotel') rt_r = models.ForeignKey(RoomType, on_delete=models.CASCADE, related_name=\"rt_room\", verbose_name='ID Room type') number_room = models.PositiveIntegerField(verbose_name='Number') status_room = models.CharField(max_length=1, choices=STATUS_CHOICES, default='F', verbose_name='Status') review_room = models.CharField(max_length=255, null=True, blank=True, verbose_name='Review') views.py Add views: from rest_framework import viewsets from rest_framework.permissions import IsAdminUser, AllowAny from .models import Hotel, RoomType, Room from .serializers import HotelSerializer, RoomTypeSerializer, RoomSerializer class HotelViewSet(viewsets.ModelViewSet): queryset = Hotel.objects.all() serializer_class = HotelSerializer def get_permissions(self): if self.action in ('list', 'retrieve'): self.permission_classes = [AllowAny, ] elif self.action in ('retrieve', 'create', 'update', 'destroy'): self.permission_classes = [IsAdminUser, ] return [permission() for permission in self.permission_classes] class RoomTypeViewSet(viewsets.ModelViewSet): queryset = RoomType.objects.all() serializer_class = RoomTypeSerializer def get_permissions(self): if self.action in ('list', 'retrieve'): self.permission_classes = [AllowAny, ] elif self.action in ('retrieve', 'create', 'update', 'destroy'): self.permission_classes = [IsAdminUser, ] return [permission() for permission in self.permission_classes] class RoomViewSet(viewsets.ModelViewSet): queryset = Room.objects.all() serializer_class = RoomSerializer def get_permissions(self): if self.action in ('list', 'retrieve'): self.permission_classes = [AllowAny, ] elif self.action in ('retrieve', 'create', 'update', 'destroy'): self.permission_classes = [IsAdminUser, ] return [permission() for permission in self.permission_classes] serializers.py Add serializers: from rest_framework import serializers from .models import Hotel, RoomType, Room # Common class CommonHotelSerializer(serializers.ModelSerializer): class Meta: model = Hotel fields = ('id', 'name_hotel') class CommonRoomTypeSerializer(serializers.ModelSerializer): type_rt = serializers.CharField(source='get_type_rt_display') class Meta: model = RoomType fields = ('id', 'type_rt', 'rating_rt', 'price_rt', 'des_rt') # Hotel class HotelSerializer(serializers.ModelSerializer): hotel_room_type = CommonRoomTypeSerializer(many=True) class Meta: model = Hotel fields = '__all__' # RoomType class RoomTypeRoomSerializer(serializers.ModelSerializer): status_room = serializers.CharField(source='get_status_room_display') class Meta: model = Room fields = ('id', 'number_room', 'status_room', 'review_room') class RoomTypeSerializer(serializers.ModelSerializer): hotel_rt = CommonHotelSerializer() rt_room = RoomTypeRoomSerializer(many=True) type_rt = serializers.CharField(source='get_type_rt_display') class Meta: model = RoomType fields = '__all__' # Room class RoomSerializer(serializers.ModelSerializer): hotel_r = CommonHotelSerializer() rt_r = CommonRoomTypeSerializer() status_room = serializers.CharField(source='get_status_room_display') class Meta: model = Room fields = '__all__' urls.py Add urls: from django.urls import path, include from .views import HotelViewSet, RoomTypeViewSet, RoomViewSet urlpatterns = [ path('account/', include('account_app.urls')), path('act/', include('reg_com_app.urls')), path('hotel/', HotelViewSet.as_view({'get': 'list', 'post': 'create'})), path('hotel/<int:pk>/', HotelViewSet.as_view({'get': 'retrieve', 'put': 'update', 'delete': 'destroy'})), path('hotel/room_type/<int:pk>/', RoomTypeViewSet.as_view({'get': 'retrieve', 'post': 'create', 'put': 'update', 'delete': 'destroy'})), path('hotel/room_type/room/<int:pk>/', RoomViewSet.as_view({'get': 'retrieve', 'post': 'create', 'put': 'update', 'delete': 'destroy'})), ] reg_com_app models.py Add models: from django.db import models from django.contrib.auth.models import User from django.core.validators import MinValueValidator, MaxValueValidator from hotel_app.models import Hotel, RoomType, Room class Registration(models.Model): STATUS_REG_CHOICES = [ ('T', 'Taken'), ('B', 'Booked'), ] STATUS_PAY_CHOICES = [ ('YP', 'Paid for'), ('NP', 'Not paid for'), ] user_reg = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name='user_registration', verbose_name='ID User') hotel_reg = models.ForeignKey(Hotel, on_delete=models.SET_NULL, null=True, blank=True, related_name='hotel_registration', verbose_name='ID Hotel') rt_reg = models.ForeignKey(RoomType, on_delete=models.SET_NULL, null=True, blank=True, related_name='rt_registration', verbose_name='ID Room type') room_reg = models.ForeignKey(Room, on_delete=models.SET_NULL, null=True, blank=True, related_name='room_registration', verbose_name='ID Room') employee_reg = models.PositiveIntegerField(null=True, blank=True, verbose_name='ID Employee') status_reg_reg = models.CharField(max_length=1, choices=STATUS_REG_CHOICES, verbose_name='Registration status') status_pay_reg = models.CharField(max_length=2, choices=STATUS_PAY_CHOICES, verbose_name='Payment status') check_in_reg = models.DateField(null=False, blank=False, verbose_name='Check in') check_out_reg = models.DateField(null=False, blank=False, verbose_name='Check out') booking_reg = models.DateField(null=False, blank=False, verbose_name='Booking date') class Comment(models.Model): user_com = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name='user_comment', verbose_name='ID Guest') room_com = models.ForeignKey(Room, on_delete=models.CASCADE, related_name='room_comment', verbose_name='ID Room') rating_com = models.PositiveSmallIntegerField(validators=[MinValueValidator(1), MaxValueValidator(10)], verbose_name='Rating') review_com = models.TextField(max_length=255, null=True, blank=True, verbose_name='Review') check_in_com = models.DateField(null=False, blank=False, verbose_name='Check in') check_out_com = models.DateField(null=False, blank=False, verbose_name='Check out') permissions.py Create permissions: from rest_framework import permissions class IsOwner(permissions.BasePermission): def has_permission(self, request, view): if request.user.is_authenticated: return True return False def has_object_permission(self, request, view, obj): if obj.author == request.user: return True return False views.py Add views: from rest_framework import viewsets from rest_framework.permissions import IsAdminUser, AllowAny from .models import Registration, Comment from .serializers import RegistrationSerializer, CommentSerializer from .permisions import IsOwner class RegistrationViewSet(viewsets.ModelViewSet): serializer_class = RegistrationSerializer permission_classes = [IsAdminUser | IsOwner, ] def get_queryset(self): user = self.request.user if user.is_staff: return Registration.objects.all() return Registration.objects.filter(user_reg=user) class CommentViewSet(viewsets.ModelViewSet): queryset = Comment.objects.all() serializer_class = CommentSerializer def get_permissions(self): if self.action in ('list', 'retrieve'): self.permission_classes = [AllowAny, ] elif self.action in ('create', 'update', 'destroy'): self.permission_classes = [IsAdminUser | IsOwner, ] return [permission() for permission in self.permission_classes] serializers.py Add serializers: from rest_framework import serializers from django.contrib.auth.models import User from .models import Registration, Comment from hotel_app.models import Hotel, RoomType, Room # Common class RegComUserSerializer(serializers.ModelSerializer): class Meta: model = User fields = ('id', 'username') class RegComHotelSerializer(serializers.ModelSerializer): class Meta: model = Hotel fields = ('id', 'name_hotel') class RegComRoomTypeSerializer(serializers.ModelSerializer): type_rt = serializers.CharField(source='get_type_rt_display') class Meta: model = RoomType fields = ('id', 'type_rt', 'price_rt') # Registration class RegistrationRoomSerializer(serializers.ModelSerializer): class Meta: model = Room fields = ('id', 'number_room') class RegistrationSerializer(serializers.ModelSerializer): user_reg = RegComUserSerializer() hotel_reg = RegComHotelSerializer() rt_reg = RegComRoomTypeSerializer() room_reg = RegistrationRoomSerializer() status_reg_reg = serializers.CharField(source='get_status_reg_reg_display') status_pay_reg = serializers.CharField(source='get_status_pay_reg_display') class Meta: model = Registration fields = '__all__' # Comment class CommentRoomSerializer(serializers.ModelSerializer): hotel_r = RegComHotelSerializer() rt_r = RegComRoomTypeSerializer() status_room = serializers.CharField(source='get_status_room_display') class Meta: model = Room fields = '__all__' class CommentSerializer(serializers.ModelSerializer): user_com = RegComUserSerializer() room_com = CommentRoomSerializer() class Meta: model = Comment fields = '__all__' urls.py Add urls: from django.urls import path from .views import RegistrationViewSet, CommentViewSet urlpatterns = [ path('reg/', RegistrationViewSet.as_view({'get': 'list', 'post': 'create'})), path('reg/<int:pk>/', RegistrationViewSet.as_view({'get': 'retrieve', 'put': 'update', 'delete': 'destroy'})), path('com/', CommentViewSet.as_view({'get': 'list', 'post': 'create'})), path('com/<int:pk>/', RegistrationViewSet.as_view({'get': 'retrieve', 'put': 'update', 'delete': 'destroy'})), ] API Structure of API: * hotel * account_app * hotel_app * reg_com_app hotel urls doc/swagger/ * GET Swagger documentation. doc/redoc/ * GET Redoc documentation. auth/token/ * POST Get refresh and access token for user. auth/token/refresh/ * POST Update refresh and access token for user. auth/ * GET Get url for working with user. account_app urls account/user/ * GET (admin, owner) List of users. POST (allow any) Create an account. account/user/<int:pk>/ * GET (admin, owner) Get the user info. PUT, DELETE (admin, owner) Change the user info. hotel_app urls hotel/ * GET (allow any) Get list of hotels. hotel/<int:pk>/ * GET (allow any) Get the hotel. POST, PUT, DELETE (admin) Change the hotel info. hotel/room_type/<int:pk>/ * GET (allow any) Get the room type. POST, PUT, DELETE (admin) Change the room type info. hotel/room_type/room/<int:pk>/ * GET (allow any) Get the room. POST, PUT, DELETE (admin) Change the room info. reg_com_app urls reg/ * GET, POST (admin, owner) Get list of registrations. reg/<int:pk>/ * GET, PUT, DELETE (admin, owner) Get or change registration info. com/ * GET, POST (admin, owner) Get list of comments. com/<int:pk>/ * GET, PUT, DELETE (admin, owner) Get or change comment info.","title":"Lab 3"},{"location":"Lr3/lr3-tasks/#structure-of-project","text":"hotel - settings of project, include the authentication account_app - user registration hotel_app - interface for hotels, room types and rooms reg_com_app - interface for registration and comment API - description of API documentation","title":"Structure of project"},{"location":"Lr3/lr3-tasks/#hotel","text":"settings.py Add configurations: INSTALLED_APPS = [ ..., 'rest_framework', 'drf_yasg', 'corsheaders', 'rest_framework_simplejwt', 'djoser', 'hotel_app', 'account_app', 'reg_com_app', ] MIDDLEWARE = [ ..., 'corsheaders.middleware.CorsMiddleware', ] Change configurations for database: DATABASES = { 'default': { \"ENGINE\": \"django.db.backends.postgresql\", \"NAME\": \"drf_hotel\", \"USER\": \"postgres\", \"PASSWORD\": \"Rabotadb123\", \"HOST\": \"localhost\", \"PORT\": \"5433\", } } Add configurations for rest framework: REST_FRAMEWORK = { 'DEFAULT_RENDERER_CLASSES': [ 'rest_framework.renderers.JSONRenderer', 'rest_framework.renderers.BrowsableAPIRenderer' ], 'DEFAULT_PERMISSION_CLASSES': [ 'rest_framework.permissions.IsAdminUser', 'rest_framework.permissions.AllowAny', ], 'DEFAULT_AUTHENTICATION_CLASSES': [ 'rest_framework_simplejwt.authentication.JWTAuthentication', ], } Add configurations for jwt: SIMPLE_JWT = { 'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30), 'REFRESH_TOKEN_LIFETIME': timedelta(days=1), 'ROTATE_REFRESH_TOKENS': False, 'BLACKLIST_AFTER_ROTATION': False, 'UPDATE_LAST_LOGIN': False, 'ALGORITHM': 'HS256', 'SIGNING_KEY': SECRET_KEY, 'VERIFYING_KEY': None, 'AUDIENCE': None, 'ISSUER': None, 'JWK_URL': None, 'LEEWAY': 0, 'AUTH_HEADER_TYPES': ('Bearer',), 'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION', 'USER_ID_FIELD': 'id', 'USER_ID_CLAIM': 'user_id', 'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule', 'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',), 'TOKEN_TYPE_CLAIM': 'token_type', 'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser', 'JTI_CLAIM': 'jti', 'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp', 'SLIDING_TOKEN_LIFETIME': timedelta(minutes=30), 'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1), } CORS_ALLOW_ALL_ORIGINS = True urls.py Add configurations for documentation (swagger, redoc) and declare path for getting token and authentication: from django.contrib import admin from django.urls import path, include from rest_framework import permissions from drf_yasg.views import get_schema_view from drf_yasg import openapi from rest_framework_simplejwt.views import ( TokenObtainPairView, TokenRefreshView, ) schema_view = get_schema_view( openapi.Info( title=\"API\", default_version='v1', description=\"Description:\", terms_of_service=\"https://drive.google.com/file/d/1QxQo5jln6soFUj6EmOVEo1yauCo375PP/view\", contact=openapi.Contact(email=\"krish19poroh@mail.ru\"), license=openapi.License(name=\"API for the project \\\"Hotel\\\"\"), ), public=True, permission_classes=[permissions.AllowAny, ], ) urlpatterns = [ path('admin/', admin.site.urls), path('doc/swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'), path('doc/redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'), path('auth/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'), path('auth/', include('djoser.urls')), path('auth/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'), path('', include('hotel_app.urls')), ]","title":"hotel"},{"location":"Lr3/lr3-tasks/#account_app","text":"models.py Add models: from django.db import models from django.contrib.auth.models import User from django.dispatch import receiver from django.db.models.signals import post_save from hotel_app.models import Hotel class Guest(models.Model): user_g = models.OneToOneField(User, on_delete=models.CASCADE, related_name=\"user_guest\", verbose_name='ID User') phone_guest = models.CharField(max_length=10, verbose_name=\"Phone\") passport_guest = models.CharField(max_length=10, null=True, blank=True, verbose_name=\"Passport\") class Employee(models.Model): user_empl = models.OneToOneField(User, on_delete=models.CASCADE, related_name=\"user_employee\", verbose_name='ID User') hotel_empl = models.ForeignKey(Hotel, on_delete=models.CASCADE, null=True, blank=True, related_name=\"hotel_employee\", verbose_name='ID Hotel') phone_employee = models.CharField(max_length=10, verbose_name=\"Phone\") position_employee = models.CharField(max_length=100, verbose_name=\"Position\") @receiver(post_save, sender=User) def create_user_profile(sender, instance, created, **kwargs): if created: Guest.objects.create(user_g=instance) @receiver(post_save, sender=User) def save_user_profile(sender, instance, **kwargs): if instance.is_staff: try: if Guest.objects.get(user_g=instance): Guest.objects.filter(user_g=instance).delete() Employee.objects.create(user_empl=instance) except: print('Employee already exist') else: try: if Employee.objects.all(): if Employee.objects.get(user_empl=instance): Employee.objects.filter(user_empl=instance).delete() except: print('No such employee') permissions.py Create permission: from rest_framework import permissions class IsOwner(permissions.BasePermission): def has_permission(self, request, view): if request.user.is_authenticated: return True return False def has_object_permission(self, request, view, obj): if obj.author == request.user: return True return False views.py Add views: from rest_framework import viewsets from rest_framework.permissions import IsAdminUser, AllowAny from django.contrib.auth.models import User from .serializers import MyUserSerializer from .permissions import IsOwner class UserViewSet(viewsets.ModelViewSet): queryset = User.objects.all() serializer_class = MyUserSerializer def get_permissions(self): if self.action == 'create': self.permission_classes = [AllowAny, ] elif self.action in ('list', 'retrieve', 'update', 'destroy'): self.permission_classes = [IsAdminUser | IsOwner, ] return [permission() for permission in self.permission_classes] serializers.py Add serializers: from rest_framework import serializers from django.contrib.auth.models import User from .models import Guest, Employee class GuestSerializer(serializers.ModelSerializer): class Meta: model = Guest fields = ('phone_guest', 'passport_guest') class EmployeeSerializer(serializers.ModelSerializer): class Meta: model = Employee fields = ('hotel_empl', 'phone_employee', 'position_employee') depth = 1 class MyUserSerializer(serializers.ModelSerializer): user_guest = GuestSerializer(required=False) user_employee = EmployeeSerializer(required=False) class Meta: model = User fields = ('id', 'username', 'first_name', 'last_name', 'email', 'password', 'user_guest', 'user_employee') urls.py Add urls: from django.urls import path from .views import UserViewSet urlpatterns = [ path('user/', UserViewSet.as_view({'get': 'list', 'post': 'create'})), path('user/<int:pk>/', UserViewSet.as_view({'get': 'retrieve', 'put': 'update', 'delete': 'destroy'})), ]","title":"account_app"},{"location":"Lr3/lr3-tasks/#hotel_app","text":"models.py Add models: from django.db import models from django.core.validators import MinValueValidator, MaxValueValidator class Hotel(models.Model): name_hotel = models.CharField(max_length=100, verbose_name='Name') city_hotel = models.CharField(max_length=100, verbose_name='City') address_hotel = models.CharField(max_length=255, verbose_name='Address') rating_hotel = models.PositiveSmallIntegerField(validators=[MinValueValidator(0), MaxValueValidator(10)], null=True, blank=True, verbose_name='Rating') des_hotel = models.CharField(max_length=255, null=True, blank=True, verbose_name='Description') class RoomType(models.Model): TYPE_CHOICES = [ (\"E\", 'Econom'), (\"S\", 'Standard'), (\"L\", 'Lux'), ] hotel_rt = models.ForeignKey(Hotel, on_delete=models.CASCADE, related_name=\"hotel_room_type\", verbose_name='ID Hotel') type_rt = models.CharField(max_length=1, choices=TYPE_CHOICES, verbose_name='Type') rating_rt = models.PositiveSmallIntegerField(validators=[MinValueValidator(0), MaxValueValidator(10)], null=True, blank=True, verbose_name='Rating') price_rt = models.PositiveIntegerField(verbose_name='Price') des_rt = models.CharField(max_length=255, null=True, blank=True, verbose_name='Description') class Room(models.Model): STATUS_CHOICES = [ (\"F\", 'Free'), (\"T\", 'Taken'), (\"B\", 'Booked'), ] hotel_r = models.ForeignKey(Hotel, on_delete=models.CASCADE, related_name=\"hotel_room\", verbose_name='ID Hotel') rt_r = models.ForeignKey(RoomType, on_delete=models.CASCADE, related_name=\"rt_room\", verbose_name='ID Room type') number_room = models.PositiveIntegerField(verbose_name='Number') status_room = models.CharField(max_length=1, choices=STATUS_CHOICES, default='F', verbose_name='Status') review_room = models.CharField(max_length=255, null=True, blank=True, verbose_name='Review') views.py Add views: from rest_framework import viewsets from rest_framework.permissions import IsAdminUser, AllowAny from .models import Hotel, RoomType, Room from .serializers import HotelSerializer, RoomTypeSerializer, RoomSerializer class HotelViewSet(viewsets.ModelViewSet): queryset = Hotel.objects.all() serializer_class = HotelSerializer def get_permissions(self): if self.action in ('list', 'retrieve'): self.permission_classes = [AllowAny, ] elif self.action in ('retrieve', 'create', 'update', 'destroy'): self.permission_classes = [IsAdminUser, ] return [permission() for permission in self.permission_classes] class RoomTypeViewSet(viewsets.ModelViewSet): queryset = RoomType.objects.all() serializer_class = RoomTypeSerializer def get_permissions(self): if self.action in ('list', 'retrieve'): self.permission_classes = [AllowAny, ] elif self.action in ('retrieve', 'create', 'update', 'destroy'): self.permission_classes = [IsAdminUser, ] return [permission() for permission in self.permission_classes] class RoomViewSet(viewsets.ModelViewSet): queryset = Room.objects.all() serializer_class = RoomSerializer def get_permissions(self): if self.action in ('list', 'retrieve'): self.permission_classes = [AllowAny, ] elif self.action in ('retrieve', 'create', 'update', 'destroy'): self.permission_classes = [IsAdminUser, ] return [permission() for permission in self.permission_classes] serializers.py Add serializers: from rest_framework import serializers from .models import Hotel, RoomType, Room # Common class CommonHotelSerializer(serializers.ModelSerializer): class Meta: model = Hotel fields = ('id', 'name_hotel') class CommonRoomTypeSerializer(serializers.ModelSerializer): type_rt = serializers.CharField(source='get_type_rt_display') class Meta: model = RoomType fields = ('id', 'type_rt', 'rating_rt', 'price_rt', 'des_rt') # Hotel class HotelSerializer(serializers.ModelSerializer): hotel_room_type = CommonRoomTypeSerializer(many=True) class Meta: model = Hotel fields = '__all__' # RoomType class RoomTypeRoomSerializer(serializers.ModelSerializer): status_room = serializers.CharField(source='get_status_room_display') class Meta: model = Room fields = ('id', 'number_room', 'status_room', 'review_room') class RoomTypeSerializer(serializers.ModelSerializer): hotel_rt = CommonHotelSerializer() rt_room = RoomTypeRoomSerializer(many=True) type_rt = serializers.CharField(source='get_type_rt_display') class Meta: model = RoomType fields = '__all__' # Room class RoomSerializer(serializers.ModelSerializer): hotel_r = CommonHotelSerializer() rt_r = CommonRoomTypeSerializer() status_room = serializers.CharField(source='get_status_room_display') class Meta: model = Room fields = '__all__' urls.py Add urls: from django.urls import path, include from .views import HotelViewSet, RoomTypeViewSet, RoomViewSet urlpatterns = [ path('account/', include('account_app.urls')), path('act/', include('reg_com_app.urls')), path('hotel/', HotelViewSet.as_view({'get': 'list', 'post': 'create'})), path('hotel/<int:pk>/', HotelViewSet.as_view({'get': 'retrieve', 'put': 'update', 'delete': 'destroy'})), path('hotel/room_type/<int:pk>/', RoomTypeViewSet.as_view({'get': 'retrieve', 'post': 'create', 'put': 'update', 'delete': 'destroy'})), path('hotel/room_type/room/<int:pk>/', RoomViewSet.as_view({'get': 'retrieve', 'post': 'create', 'put': 'update', 'delete': 'destroy'})), ]","title":"hotel_app"},{"location":"Lr3/lr3-tasks/#reg_com_app","text":"models.py Add models: from django.db import models from django.contrib.auth.models import User from django.core.validators import MinValueValidator, MaxValueValidator from hotel_app.models import Hotel, RoomType, Room class Registration(models.Model): STATUS_REG_CHOICES = [ ('T', 'Taken'), ('B', 'Booked'), ] STATUS_PAY_CHOICES = [ ('YP', 'Paid for'), ('NP', 'Not paid for'), ] user_reg = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name='user_registration', verbose_name='ID User') hotel_reg = models.ForeignKey(Hotel, on_delete=models.SET_NULL, null=True, blank=True, related_name='hotel_registration', verbose_name='ID Hotel') rt_reg = models.ForeignKey(RoomType, on_delete=models.SET_NULL, null=True, blank=True, related_name='rt_registration', verbose_name='ID Room type') room_reg = models.ForeignKey(Room, on_delete=models.SET_NULL, null=True, blank=True, related_name='room_registration', verbose_name='ID Room') employee_reg = models.PositiveIntegerField(null=True, blank=True, verbose_name='ID Employee') status_reg_reg = models.CharField(max_length=1, choices=STATUS_REG_CHOICES, verbose_name='Registration status') status_pay_reg = models.CharField(max_length=2, choices=STATUS_PAY_CHOICES, verbose_name='Payment status') check_in_reg = models.DateField(null=False, blank=False, verbose_name='Check in') check_out_reg = models.DateField(null=False, blank=False, verbose_name='Check out') booking_reg = models.DateField(null=False, blank=False, verbose_name='Booking date') class Comment(models.Model): user_com = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name='user_comment', verbose_name='ID Guest') room_com = models.ForeignKey(Room, on_delete=models.CASCADE, related_name='room_comment', verbose_name='ID Room') rating_com = models.PositiveSmallIntegerField(validators=[MinValueValidator(1), MaxValueValidator(10)], verbose_name='Rating') review_com = models.TextField(max_length=255, null=True, blank=True, verbose_name='Review') check_in_com = models.DateField(null=False, blank=False, verbose_name='Check in') check_out_com = models.DateField(null=False, blank=False, verbose_name='Check out') permissions.py Create permissions: from rest_framework import permissions class IsOwner(permissions.BasePermission): def has_permission(self, request, view): if request.user.is_authenticated: return True return False def has_object_permission(self, request, view, obj): if obj.author == request.user: return True return False views.py Add views: from rest_framework import viewsets from rest_framework.permissions import IsAdminUser, AllowAny from .models import Registration, Comment from .serializers import RegistrationSerializer, CommentSerializer from .permisions import IsOwner class RegistrationViewSet(viewsets.ModelViewSet): serializer_class = RegistrationSerializer permission_classes = [IsAdminUser | IsOwner, ] def get_queryset(self): user = self.request.user if user.is_staff: return Registration.objects.all() return Registration.objects.filter(user_reg=user) class CommentViewSet(viewsets.ModelViewSet): queryset = Comment.objects.all() serializer_class = CommentSerializer def get_permissions(self): if self.action in ('list', 'retrieve'): self.permission_classes = [AllowAny, ] elif self.action in ('create', 'update', 'destroy'): self.permission_classes = [IsAdminUser | IsOwner, ] return [permission() for permission in self.permission_classes] serializers.py Add serializers: from rest_framework import serializers from django.contrib.auth.models import User from .models import Registration, Comment from hotel_app.models import Hotel, RoomType, Room # Common class RegComUserSerializer(serializers.ModelSerializer): class Meta: model = User fields = ('id', 'username') class RegComHotelSerializer(serializers.ModelSerializer): class Meta: model = Hotel fields = ('id', 'name_hotel') class RegComRoomTypeSerializer(serializers.ModelSerializer): type_rt = serializers.CharField(source='get_type_rt_display') class Meta: model = RoomType fields = ('id', 'type_rt', 'price_rt') # Registration class RegistrationRoomSerializer(serializers.ModelSerializer): class Meta: model = Room fields = ('id', 'number_room') class RegistrationSerializer(serializers.ModelSerializer): user_reg = RegComUserSerializer() hotel_reg = RegComHotelSerializer() rt_reg = RegComRoomTypeSerializer() room_reg = RegistrationRoomSerializer() status_reg_reg = serializers.CharField(source='get_status_reg_reg_display') status_pay_reg = serializers.CharField(source='get_status_pay_reg_display') class Meta: model = Registration fields = '__all__' # Comment class CommentRoomSerializer(serializers.ModelSerializer): hotel_r = RegComHotelSerializer() rt_r = RegComRoomTypeSerializer() status_room = serializers.CharField(source='get_status_room_display') class Meta: model = Room fields = '__all__' class CommentSerializer(serializers.ModelSerializer): user_com = RegComUserSerializer() room_com = CommentRoomSerializer() class Meta: model = Comment fields = '__all__' urls.py Add urls: from django.urls import path from .views import RegistrationViewSet, CommentViewSet urlpatterns = [ path('reg/', RegistrationViewSet.as_view({'get': 'list', 'post': 'create'})), path('reg/<int:pk>/', RegistrationViewSet.as_view({'get': 'retrieve', 'put': 'update', 'delete': 'destroy'})), path('com/', CommentViewSet.as_view({'get': 'list', 'post': 'create'})), path('com/<int:pk>/', RegistrationViewSet.as_view({'get': 'retrieve', 'put': 'update', 'delete': 'destroy'})), ]","title":"reg_com_app"},{"location":"Lr3/lr3-tasks/#api","text":"Structure of API: * hotel * account_app * hotel_app * reg_com_app","title":"API"},{"location":"Lr3/lr3-tasks/#hotel-urls","text":"doc/swagger/ * GET Swagger documentation. doc/redoc/ * GET Redoc documentation. auth/token/ * POST Get refresh and access token for user. auth/token/refresh/ * POST Update refresh and access token for user. auth/ * GET Get url for working with user.","title":"hotel urls"},{"location":"Lr3/lr3-tasks/#account_app-urls","text":"account/user/ * GET (admin, owner) List of users. POST (allow any) Create an account. account/user/<int:pk>/ * GET (admin, owner) Get the user info. PUT, DELETE (admin, owner) Change the user info.","title":"account_app urls"},{"location":"Lr3/lr3-tasks/#hotel_app-urls","text":"hotel/ * GET (allow any) Get list of hotels. hotel/<int:pk>/ * GET (allow any) Get the hotel. POST, PUT, DELETE (admin) Change the hotel info. hotel/room_type/<int:pk>/ * GET (allow any) Get the room type. POST, PUT, DELETE (admin) Change the room type info. hotel/room_type/room/<int:pk>/ * GET (allow any) Get the room. POST, PUT, DELETE (admin) Change the room info.","title":"hotel_app urls"},{"location":"Lr3/lr3-tasks/#reg_com_app-urls","text":"reg/ * GET, POST (admin, owner) Get list of registrations. reg/<int:pk>/ * GET, PUT, DELETE (admin, owner) Get or change registration info. com/ * GET, POST (admin, owner) Get list of comments. com/<int:pk>/ * GET, PUT, DELETE (admin, owner) Get or change comment info.","title":"reg_com_app urls"},{"location":"Lr4/lr4-tasks/","text":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u041f\u0440\u043e\u0435\u043a\u0442 - \u0441\u0443\u0442\u044c \u043f\u0440\u043e\u0435\u043a\u0442\u0430 router, stores, api - \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u043e\u0443\u0442\u0435\u0440\u0430, \u0441\u0442\u043e\u0440\u0430 \u0438 \u0430\u043f\u0438 layout, views, components - \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043b\u044d\u0439\u0430\u0443\u0442\u0430, \u0432\u044c\u044e\u0445\u0438 \u0438 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430 \u041f\u0440\u043e\u0435\u043a\u0442 \u041f\u043e \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f\u043c \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c web-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 Vue. \u042f \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043b web-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0441\u0435\u0442\u0438 \u043e\u0442\u0435\u043b\u0435\u0439 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442: \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u043e\u0442\u0435\u043b\u0435\u0439, \u0442\u0438\u043f\u043e\u0432 \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u0438 \u0441\u0430\u043c\u0438\u0445 \u043d\u043e\u043c\u0435\u0440\u0430\u0445, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u0438 \u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u0434\u043b\u044f \u043d\u043e\u043c\u0435\u0440\u043e\u0432. router, stores, api \u0412 \u043f\u0430\u043f\u043a\u0435 router \u043b\u0435\u0436\u0438\u0442 \u0444\u0430\u0439\u043b index.js \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043f\u0440\u043e\u043f\u0438\u0441\u0430\u043d\u044b \u043f\u0443\u0442\u0438 \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d\u044b \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u044d\u0442\u0438\u0445 \u043f\u0443\u0442\u0435\u0439. index.js import {createRouter, createWebHistory} from 'vue-router' import HotelView from '../views/HotelPage.vue' import RoomTypeView from '../views/RoomTypePage.vue' \u2026 const router = createRouter({ history: createWebHistory(import.meta.env.BASE_URL), routes: [ { path: '/', name: 'hotels', component: HotelView }, { path: '/hotel/:id/', name: 'room_types', props: true, component: RoomTypeView }, \u2026 ] }) export default router \u0412 \u043f\u0430\u043f\u043a\u0435 stores \u043b\u0435\u0436\u0430\u0442 \u0444\u0430\u0439\u043b\u044b (index.js, hotels.js, regCom.js, user.js), \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f\u043c\u0438 \u0438 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\u043c\u0438. \u0420\u0430\u0437\u0431\u0438\u0442\u044b \u0444\u0430\u0439\u043b\u044b \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0447\u0442\u043e hotels.js \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 Hotel, RoomType, Room \u043d\u0430\u0448\u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e, regCom.js \u0434\u043b\u044f Registration, Comment, user.js \u0434\u043b\u044f User, Guest, Employee. * user.js import {defineStore} from 'pinia' import {userApi} from \"@/api\"; const useUserStore = defineStore('user', { state: () => ({ users: [], tokens: [], accUser: [] }), actions: { async loadUsers(token) { const response = await userApi.getUsers(token) this.users = response.data return response }, \u2026 } }) export default useUserStore \u0412 \u043f\u0430\u043f\u043a\u0435 api \u043b\u0435\u0436\u0430\u0442 \u0444\u0430\u0439\u043b\u044b (index.js, instance.js, hotels.js, regCom.js, user.js), \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432 \u0441\u0432\u043e\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0440\u0430\u0431\u043e\u0442\u044b \u0441 API \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043f\u043e API \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 Axios. \u0412 \u0444\u0430\u0439\u043b\u0435 instance.js, \u043f\u043e\u043c\u0438\u043c\u043e \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 axios, \u043c\u044b \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c interceptors \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043e\u0448\u0438\u0431\u043e\u043a. \u0412 \u043d\u0430\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f access token. * instance.js import axios from \"axios\"; const apiURL = 'http://127.0.0.1:8000' const instance = axios.create({ baseURL: apiURL }) \u2026 instance.interceptors.response.use(function (response) { return response; }, async function (error) { if (error.response.status === 401) { const originalRequest = error.config const refreshToken = localStorage.getItem('refreshToken') const response = async (refreshToken) => { return await instance({ method: 'POST', url: `/auth/token/refresh/`, data: { refresh: refreshToken } }) } const accessToken = await response(refreshToken) localStorage.setItem('accessToken', accessToken.data.access) originalRequest.headers['Authorization'] = 'Bearer ' + accessToken.data.access return instance(originalRequest) } return Promise.reject(error); }) export default instance user.js class UserApi { constructor(instance) { this.API = instance } login = async (username, password) => { return this.API({ method: 'POST', url: `/auth/token/`, data: { username: username, password: password } }) } \u2026 putAccUser = async (token, id, username, firstName, lastName, email, phoneGuest, passportGuest, phoneEmployee, positionEmployee) => { return this.API({ method: 'PUT', url: `/account/user/${id}/`, headers: {'Authorization': 'Bearer ' + token}, data: { username: username, first_name: firstName, last_name: lastName, email: email, user_guest: { phone_guest: phoneGuest, passport_guest: passportGuest }, user_employee: { phone_employee: phoneEmployee, position_employee: positionEmployee } } }) } deleteUser = async (token, id, currentPassword) => { return this.API({ method: 'DELETE', url: `/auth/users/${id}/`, headers: {'Authorization': 'Bearer ' + token}, data: { current_password: currentPassword } }) } createUser = async (username, email, password) => { return this.API({ method: 'POST', url: '/auth/users/', data: { username: username, email: email, password: password } }) } } export default UserApi layout, views, components \u0412 layout \u043c\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u0448\u0430\u0431\u043b\u043e\u043d \u0438 \u043f\u0440\u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c tag \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043d\u0430 \u044d\u0442\u043e \u043c\u0435\u0441\u0442\u043e \u043f\u043e\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u0430\u0448\u0438 views. * BaseLayout.vue <template> <main class=\"background\"> <div class=\"blur\"> <slot /> </div> </main> </template> <script> export default { name: \"BaseLayout\" } </script> <style scoped> \u2026 </style> \u0412\u043e views \u043c\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u043b\u0438 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b web-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0412 \u0445\u043e\u0434\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u043b\u043e\u0433\u0438\u043a\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u0430 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u043b\u0430\u0441\u044c. \u0420\u0430\u0437\u0431\u0435\u0440\u0435\u043c \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043c\u043e\u043c\u0435\u043d\u0442\u044b. \u041f\u0435\u0440\u0435\u0434\u0430\u0447\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0442 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u043c\u0443: \u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u043c\u0443 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0443 \u043c\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0434\u043e\u0447\u0435\u0440\u043d\u0438\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 (HotelItem.vue) \u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432\u044b v-bind \u043f\u0440\u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0438\u043c\u0435\u043d\u0430 props \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430. * HotelPage.vue <template> <base-layout> <nav-bar /> <div id=\"hotelPage\"> <div class=\"container col-8 py-4\"> <h1 class=\"text-center\">Our hotels</h1> <ul class=\"navbar-nav p-3\"> <li class=\"nav-item\" v-for=\"hotel in hotels\" :key=\"hotel.id\"> <hotel-item class=\"mx-0 px-0\" :name_hotel=\"hotel.name_hotel\" :address_hotel=\"hotel.address_hotel\" :des_hotel=\"hotel.des_hotel\" /> <p class=\"d-flex justify-content-center\" id=\"lookButton\"> <RouterLink class=\"nav-link btn-text w-100 text-center fs-5\" :to=\"{name: 'room_types', params: {id: hotel.id}}\">Look</RouterLink> </p> </li> </ul> </div> </div> </base-layout> </template> <script> import \u2026 export default { name: \"HotelPage\", components: { BaseLayout, HotelItem, NavBar }, computed: { ...mapState(useHotelsStore, ['hotels']) }, methods: { ...mapActions(useHotelsStore, ['loadHotels']) }, mounted() { this.loadHotels() } } </script> <style scoped> \u2026 </style> \u0414\u043e\u0447\u0435\u0440\u043d\u0438\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u043d\u0430 \u0441\u0432\u043e\u0435\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 props, \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0438\u0445 \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442. * HotelItem.vue <template> <div class=\"row\" id=\"hotelItem\"> <div class=\"col-6\"> <p class=\"fs-2\">{{ name_hotel }}</p> <p class=\"fs-4\">Address: <span class=\"fs-5\">{{ address_hotel }}</span></p> </div> <div class=\"col-6\"> <p class=\"fs-2\">Description:</p> <p v-if=\"des_hotel\" class=\"fs-5\">{{ des_hotel }}</p> <p v-else class=\"fs-5\">We don't have any descriptions...</p> </div> </div> </template> <script> export default { name: \"HotelItem\", props: { name_hotel: { type: String, required: true }, address_hotel: { type: String, required: true }, des_hotel: { type: String, required: false } } } </script> <style scoped> \u2026 </style> \u041f\u0435\u0440\u0435\u0434\u0430\u0447\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0442 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u043c\u0443: \u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0442 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0432 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u043c\u044b \u0432 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0435 \u043f\u0440\u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u043c\u0435\u0442\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430\u0432\u0435\u0440\u0445, \u0430 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043e\u0442 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u0433\u043e. \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439: * \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u043c\u0435\u0442\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430\u0432\u0435\u0440\u0445, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044e this.$emit; * \u0412 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432\u044b v-on \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u0438\u0435; * \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u0448\u0435\u0434\u0448\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. * UpdateRegForm.vue <template> \u2026 </template> <script> import \u2026 export default { name: \"UpdateRegForm\", data() { return { isValid: true, idReg: \"\", idHotel: \"\", nameHotel: \"\", idRoomType: \"\", roomType: \"\", idRoom: \"\", numberRoom: \"\", idEmployee: \"\", statusReg: \"\", statusPay: \"\", checkIn: \"\", checkOut: \"\", isStaff: localStorage.getItem('isStaff') === \"true\" } }, computed: { ...mapState(useRegComStore, ['regs']), ...mapState(useHotelsStore, ['hotels', 'rooms']) }, methods: { ...mapActions(useRegComStore, ['loadRegs', 'delReg']), ...mapActions(useHotelsStore, ['loadHotels', 'loadRooms']), async saveBook() { await this.loadHotels() for (let hotel of this.hotels) { if (this.nameHotel === hotel.name_hotel) { this.idHotel = hotel.id for (let roomType of hotel.hotel_room_type) { if (this.roomType === roomType.type_rt) { this.idRoomType = roomType.id break } this.idRoomType = 0 } break } this.idHotel = 0 } await this.loadRooms(this.idRoomType) for (let room of this.rooms.rt_room) { if (this.numberRoom.toString() === room.number_room.toString()) { this.idRoom = room.id break } this.idRoom = 0 } if (this.idHotel === 0 || this.idRoomType === 0 || this.idRoom === 0) { this.isValid = false return } this.isValid = true const stReg = (this.statusReg === \"Booked\") ? \"B\" : \"T\" const stPay = (this.statusPay === \"Not paid for\") ? \"NP\" : \"YP\" this.$emit('saveBook', { id_hotel: this.idHotel, name_hotel: this.nameHotel, id_rt: this.idRoomType, rt: this.roomType, id_room: this.idRoom, number_room: this.numberRoom, id_employee: this.idEmployee, status_reg: stReg, status_pay: stPay, check_in: this.checkIn, check_out: this.checkOut }) }, \u2026 } } </script> <style scoped> \u2026 </style> UpdateRegPage.vue <template> <base-layout> <nav-bar /> <div class=\"container col-5 py-4\" id=\"updateRegPage\"> <h1 class=\"text-center\">Change registration</h1> <update-reg-form @saveBook='onSaveBook' /> </div> </base-layout> </template> <script> import \u2026 export default { name: \"UpdateRegPage\", components: { NavBar, UpdateRegForm, BaseLayout }, computed: { ...mapState(useRegComStore, ['regs']) }, methods: { ...mapActions(useRegComStore, ['updateReg']), async onSaveBook(data) { const accessToken = localStorage.getItem('accessToken') const idReg = this.$route.params['id'] const idUser = localStorage.getItem('idUser') const booking = new Date().toJSON().slice(0, 10) await this.updateReg(accessToken, idReg, idUser, data.id_hotel, data.id_rt, data.id_room, data.id_employee, data.status_reg, data.status_pay, data.check_in, data.check_out, booking) } } } </script> <style scoped> \u2026 </style> \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435, \u043c\u044b \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0444\u043e\u0440\u043c\u0435 \u043d\u0430\u0436\u0438\u043c\u0430\u0435\u043c \u043d\u0430 \u043a\u043d\u043e\u043f\u043a\u0443 Save, \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043d\u0430\u0432\u0435\u0440\u0445 \u0438 \u0432 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440.","title":"Lab 4"},{"location":"Lr4/lr4-tasks/#_1","text":"\u041f\u0440\u043e\u0435\u043a\u0442 - \u0441\u0443\u0442\u044c \u043f\u0440\u043e\u0435\u043a\u0442\u0430 router, stores, api - \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u043e\u0443\u0442\u0435\u0440\u0430, \u0441\u0442\u043e\u0440\u0430 \u0438 \u0430\u043f\u0438 layout, views, components - \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043b\u044d\u0439\u0430\u0443\u0442\u0430, \u0432\u044c\u044e\u0445\u0438 \u0438 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438"},{"location":"Lr4/lr4-tasks/#_2","text":"\u041f\u043e \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f\u043c \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c web-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 Vue. \u042f \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043b web-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0441\u0435\u0442\u0438 \u043e\u0442\u0435\u043b\u0435\u0439 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442: \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u043e\u0442\u0435\u043b\u0435\u0439, \u0442\u0438\u043f\u043e\u0432 \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u0438 \u0441\u0430\u043c\u0438\u0445 \u043d\u043e\u043c\u0435\u0440\u0430\u0445, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u0438 \u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u0434\u043b\u044f \u043d\u043e\u043c\u0435\u0440\u043e\u0432.","title":"\u041f\u0440\u043e\u0435\u043a\u0442"},{"location":"Lr4/lr4-tasks/#router-stores-api","text":"\u0412 \u043f\u0430\u043f\u043a\u0435 router \u043b\u0435\u0436\u0438\u0442 \u0444\u0430\u0439\u043b index.js \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043f\u0440\u043e\u043f\u0438\u0441\u0430\u043d\u044b \u043f\u0443\u0442\u0438 \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d\u044b \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u044d\u0442\u0438\u0445 \u043f\u0443\u0442\u0435\u0439. index.js import {createRouter, createWebHistory} from 'vue-router' import HotelView from '../views/HotelPage.vue' import RoomTypeView from '../views/RoomTypePage.vue' \u2026 const router = createRouter({ history: createWebHistory(import.meta.env.BASE_URL), routes: [ { path: '/', name: 'hotels', component: HotelView }, { path: '/hotel/:id/', name: 'room_types', props: true, component: RoomTypeView }, \u2026 ] }) export default router \u0412 \u043f\u0430\u043f\u043a\u0435 stores \u043b\u0435\u0436\u0430\u0442 \u0444\u0430\u0439\u043b\u044b (index.js, hotels.js, regCom.js, user.js), \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f\u043c\u0438 \u0438 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\u043c\u0438. \u0420\u0430\u0437\u0431\u0438\u0442\u044b \u0444\u0430\u0439\u043b\u044b \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0447\u0442\u043e hotels.js \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 Hotel, RoomType, Room \u043d\u0430\u0448\u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e, regCom.js \u0434\u043b\u044f Registration, Comment, user.js \u0434\u043b\u044f User, Guest, Employee. * user.js import {defineStore} from 'pinia' import {userApi} from \"@/api\"; const useUserStore = defineStore('user', { state: () => ({ users: [], tokens: [], accUser: [] }), actions: { async loadUsers(token) { const response = await userApi.getUsers(token) this.users = response.data return response }, \u2026 } }) export default useUserStore \u0412 \u043f\u0430\u043f\u043a\u0435 api \u043b\u0435\u0436\u0430\u0442 \u0444\u0430\u0439\u043b\u044b (index.js, instance.js, hotels.js, regCom.js, user.js), \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432 \u0441\u0432\u043e\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0440\u0430\u0431\u043e\u0442\u044b \u0441 API \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043f\u043e API \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 Axios. \u0412 \u0444\u0430\u0439\u043b\u0435 instance.js, \u043f\u043e\u043c\u0438\u043c\u043e \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 axios, \u043c\u044b \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c interceptors \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043e\u0448\u0438\u0431\u043e\u043a. \u0412 \u043d\u0430\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f access token. * instance.js import axios from \"axios\"; const apiURL = 'http://127.0.0.1:8000' const instance = axios.create({ baseURL: apiURL }) \u2026 instance.interceptors.response.use(function (response) { return response; }, async function (error) { if (error.response.status === 401) { const originalRequest = error.config const refreshToken = localStorage.getItem('refreshToken') const response = async (refreshToken) => { return await instance({ method: 'POST', url: `/auth/token/refresh/`, data: { refresh: refreshToken } }) } const accessToken = await response(refreshToken) localStorage.setItem('accessToken', accessToken.data.access) originalRequest.headers['Authorization'] = 'Bearer ' + accessToken.data.access return instance(originalRequest) } return Promise.reject(error); }) export default instance user.js class UserApi { constructor(instance) { this.API = instance } login = async (username, password) => { return this.API({ method: 'POST', url: `/auth/token/`, data: { username: username, password: password } }) } \u2026 putAccUser = async (token, id, username, firstName, lastName, email, phoneGuest, passportGuest, phoneEmployee, positionEmployee) => { return this.API({ method: 'PUT', url: `/account/user/${id}/`, headers: {'Authorization': 'Bearer ' + token}, data: { username: username, first_name: firstName, last_name: lastName, email: email, user_guest: { phone_guest: phoneGuest, passport_guest: passportGuest }, user_employee: { phone_employee: phoneEmployee, position_employee: positionEmployee } } }) } deleteUser = async (token, id, currentPassword) => { return this.API({ method: 'DELETE', url: `/auth/users/${id}/`, headers: {'Authorization': 'Bearer ' + token}, data: { current_password: currentPassword } }) } createUser = async (username, email, password) => { return this.API({ method: 'POST', url: '/auth/users/', data: { username: username, email: email, password: password } }) } } export default UserApi","title":"router, stores, api"},{"location":"Lr4/lr4-tasks/#layout-views-components","text":"\u0412 layout \u043c\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u0448\u0430\u0431\u043b\u043e\u043d \u0438 \u043f\u0440\u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c tag \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043d\u0430 \u044d\u0442\u043e \u043c\u0435\u0441\u0442\u043e \u043f\u043e\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u0430\u0448\u0438 views. * BaseLayout.vue <template> <main class=\"background\"> <div class=\"blur\"> <slot /> </div> </main> </template> <script> export default { name: \"BaseLayout\" } </script> <style scoped> \u2026 </style> \u0412\u043e views \u043c\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u043b\u0438 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b web-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0412 \u0445\u043e\u0434\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u043b\u043e\u0433\u0438\u043a\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u0430 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u043b\u0430\u0441\u044c. \u0420\u0430\u0437\u0431\u0435\u0440\u0435\u043c \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043c\u043e\u043c\u0435\u043d\u0442\u044b.","title":"layout, views, components"},{"location":"Lr4/lr4-tasks/#_3","text":"\u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u043c\u0443 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0443 \u043c\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0434\u043e\u0447\u0435\u0440\u043d\u0438\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 (HotelItem.vue) \u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432\u044b v-bind \u043f\u0440\u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0438\u043c\u0435\u043d\u0430 props \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430. * HotelPage.vue <template> <base-layout> <nav-bar /> <div id=\"hotelPage\"> <div class=\"container col-8 py-4\"> <h1 class=\"text-center\">Our hotels</h1> <ul class=\"navbar-nav p-3\"> <li class=\"nav-item\" v-for=\"hotel in hotels\" :key=\"hotel.id\"> <hotel-item class=\"mx-0 px-0\" :name_hotel=\"hotel.name_hotel\" :address_hotel=\"hotel.address_hotel\" :des_hotel=\"hotel.des_hotel\" /> <p class=\"d-flex justify-content-center\" id=\"lookButton\"> <RouterLink class=\"nav-link btn-text w-100 text-center fs-5\" :to=\"{name: 'room_types', params: {id: hotel.id}}\">Look</RouterLink> </p> </li> </ul> </div> </div> </base-layout> </template> <script> import \u2026 export default { name: \"HotelPage\", components: { BaseLayout, HotelItem, NavBar }, computed: { ...mapState(useHotelsStore, ['hotels']) }, methods: { ...mapActions(useHotelsStore, ['loadHotels']) }, mounted() { this.loadHotels() } } </script> <style scoped> \u2026 </style> \u0414\u043e\u0447\u0435\u0440\u043d\u0438\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u043d\u0430 \u0441\u0432\u043e\u0435\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 props, \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0438\u0445 \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442. * HotelItem.vue <template> <div class=\"row\" id=\"hotelItem\"> <div class=\"col-6\"> <p class=\"fs-2\">{{ name_hotel }}</p> <p class=\"fs-4\">Address: <span class=\"fs-5\">{{ address_hotel }}</span></p> </div> <div class=\"col-6\"> <p class=\"fs-2\">Description:</p> <p v-if=\"des_hotel\" class=\"fs-5\">{{ des_hotel }}</p> <p v-else class=\"fs-5\">We don't have any descriptions...</p> </div> </div> </template> <script> export default { name: \"HotelItem\", props: { name_hotel: { type: String, required: true }, address_hotel: { type: String, required: true }, des_hotel: { type: String, required: false } } } </script> <style scoped> \u2026 </style>","title":"\u041f\u0435\u0440\u0435\u0434\u0430\u0447\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0442 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u043c\u0443:"},{"location":"Lr4/lr4-tasks/#_4","text":"\u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0442 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0432 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u043c\u044b \u0432 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0435 \u043f\u0440\u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u043c\u0435\u0442\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430\u0432\u0435\u0440\u0445, \u0430 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043e\u0442 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u0433\u043e. \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439: * \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u043c\u0435\u0442\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430\u0432\u0435\u0440\u0445, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044e this.$emit; * \u0412 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432\u044b v-on \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u0438\u0435; * \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u0448\u0435\u0434\u0448\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. * UpdateRegForm.vue <template> \u2026 </template> <script> import \u2026 export default { name: \"UpdateRegForm\", data() { return { isValid: true, idReg: \"\", idHotel: \"\", nameHotel: \"\", idRoomType: \"\", roomType: \"\", idRoom: \"\", numberRoom: \"\", idEmployee: \"\", statusReg: \"\", statusPay: \"\", checkIn: \"\", checkOut: \"\", isStaff: localStorage.getItem('isStaff') === \"true\" } }, computed: { ...mapState(useRegComStore, ['regs']), ...mapState(useHotelsStore, ['hotels', 'rooms']) }, methods: { ...mapActions(useRegComStore, ['loadRegs', 'delReg']), ...mapActions(useHotelsStore, ['loadHotels', 'loadRooms']), async saveBook() { await this.loadHotels() for (let hotel of this.hotels) { if (this.nameHotel === hotel.name_hotel) { this.idHotel = hotel.id for (let roomType of hotel.hotel_room_type) { if (this.roomType === roomType.type_rt) { this.idRoomType = roomType.id break } this.idRoomType = 0 } break } this.idHotel = 0 } await this.loadRooms(this.idRoomType) for (let room of this.rooms.rt_room) { if (this.numberRoom.toString() === room.number_room.toString()) { this.idRoom = room.id break } this.idRoom = 0 } if (this.idHotel === 0 || this.idRoomType === 0 || this.idRoom === 0) { this.isValid = false return } this.isValid = true const stReg = (this.statusReg === \"Booked\") ? \"B\" : \"T\" const stPay = (this.statusPay === \"Not paid for\") ? \"NP\" : \"YP\" this.$emit('saveBook', { id_hotel: this.idHotel, name_hotel: this.nameHotel, id_rt: this.idRoomType, rt: this.roomType, id_room: this.idRoom, number_room: this.numberRoom, id_employee: this.idEmployee, status_reg: stReg, status_pay: stPay, check_in: this.checkIn, check_out: this.checkOut }) }, \u2026 } } </script> <style scoped> \u2026 </style> UpdateRegPage.vue <template> <base-layout> <nav-bar /> <div class=\"container col-5 py-4\" id=\"updateRegPage\"> <h1 class=\"text-center\">Change registration</h1> <update-reg-form @saveBook='onSaveBook' /> </div> </base-layout> </template> <script> import \u2026 export default { name: \"UpdateRegPage\", components: { NavBar, UpdateRegForm, BaseLayout }, computed: { ...mapState(useRegComStore, ['regs']) }, methods: { ...mapActions(useRegComStore, ['updateReg']), async onSaveBook(data) { const accessToken = localStorage.getItem('accessToken') const idReg = this.$route.params['id'] const idUser = localStorage.getItem('idUser') const booking = new Date().toJSON().slice(0, 10) await this.updateReg(accessToken, idReg, idUser, data.id_hotel, data.id_rt, data.id_room, data.id_employee, data.status_reg, data.status_pay, data.check_in, data.check_out, booking) } } } </script> <style scoped> \u2026 </style> \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435, \u043c\u044b \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0444\u043e\u0440\u043c\u0435 \u043d\u0430\u0436\u0438\u043c\u0430\u0435\u043c \u043d\u0430 \u043a\u043d\u043e\u043f\u043a\u0443 Save, \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043d\u0430\u0432\u0435\u0440\u0445 \u0438 \u0432 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440.","title":"\u041f\u0435\u0440\u0435\u0434\u0430\u0447\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0442 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u043c\u0443:"},{"location":"PW3/pw3-tasks/","text":"Structure of practical works PW 3.1 - Django Web framework PW 3.2 - Django rest framework PW 3.3 - Documentation PW 3.1 1 task practical3_1_1.py Script for adding data: from cars_first_app.models import * drivers = [] for i in range(1, 7): new_driver = Driver(username=f\"driver{i}\", first_name=f\"TestFN{i}\", last_name=f\"TestSN{i}\", birthday=f\"2000-07-0{i}\", passport=f\"111111111{i}\", password=\"123\") drivers.append(new_driver) new_driver.save() i = 1 for driver in drivers: new_license = DriverLicense(id_driver=driver, license_number=f\"111111111{i}\", type='B', issue_date=f\"2022-12-0{i}\") new_license.save() i += 1 cars = [] for i in range(1, 7): new_car = Car(license_plate=f\"a00{i}aa\", car_brand='Prototype', model=f\"v{i}\") cars.append(new_car) new_car.save() for i in range(len(drivers)): new_ownership = Ownership(id_driver=drivers[i], id_car=cars[i], start_date=f\"2020-01-0{i+1}\", end_date=f\"2022-12-0{i+1}\") new_ownership.save() 2 task models.py Add related_name into DriverLicense, Ownership models: class DriverLicense(models.Model): id_driver = models.ForeignKey(Driver, on_delete=models.CASCADE, related_name=\"driver_license\") license_number = models.CharField(max_length=10) type = models.CharField(max_length=10) issue_date = models.DateField() class Ownership(models.Model): id_driver = models.ForeignKey(Driver, on_delete=models.CASCADE, related_name=\"driver_ownership\") id_car = models.ForeignKey(Car, on_delete=models.CASCADE, related_name=\"car_ownership\") start_date = models.DateField(null=False, blank=False) end_date = models.DateField(null=True, blank=True) practical3_1_2.py Get all cars with \"Prototype\" brand: Car.objects.filter(car_brand=\"Prototype\") Get all drivers with \"Stive\" name: Driver.objects.filter(first_name=\"Stive\") Get driver license for random driver id: rand_id_driver = Driver.objects.get(first_name=\"TestFN5\").pk DriverLicense.objects.get(id_driver=rand_id_driver) Get all drivers who have a red car: Driver.objects.filter(driver_ownership__id_car__color=\"red\") Get all drivers who have car from 2020 year: Driver.objects.filter(driver_ownership__start_date__gte=\"2020-01-01\") 3 task practical3_1_3.py Get date of the oldest driver license: DriverLicense.objects.aggregate(oldest_license=Min('issue_date')) Get last date of ownership: Ownership.objects.aggregate(oldest_license=Max('start_date')) Get drivers and their ownerships: counter_car = Driver.objects.annotate(count_car=Count(\"driver_ownership\")) for driver in counter_car: print(driver.pk, driver.count_car) Get count of each brand cars: Car.objects.values(\"car_brand\").annotate(count=Count(\"id\")) Get drivers who sorted by issue date of license: Driver.objects.order_by('driver_license__issue_date') PW 3.2 1 task views.py Add two classes for GET and POST request for driver: class DriverAPIView(APIView): def get(self, request): drivers = Driver.objects.all() serializer = DriverSerializer(drivers, many=True) return Response({\"Drivers\": serializer.data}) class CreateDriverAPIView(APIView): def post(self, request): driver = request.data.get(\"driver\") serializer = CreateDriverSerializer(data=driver) if serializer.is_valid(raise_exception=True): driver_saved = serializer.save() return Response({\"Success\": \"Driver '{}' created succesfully.\".format(driver_saved.username)}) serializes.py For these classes serializers: class DriverSerializer(serializers.ModelSerializer): class Meta: model = Driver fields = \"__all__\" class CreateDriverSerializer(serializers.ModelSerializer): def create(self, validated_data): return Driver.objects.create(**validated_data) class Meta: model = Driver fields = \"__all__\" 2 task Get drivers with license: views.py class DriverAndLicenseAPIView(generics.ListAPIView): serializer_class = DriverAndLicenseSerializer queryset = Driver.objects.all() serializes.py class DriverLicenseSerializer(serializers.ModelSerializer): class Meta: model = DriverLicense fields = (\"pk\", \"license_number\", \"type\", \"issue_date\") class DriverAndLicenseSerializer(serializers.ModelSerializer): driver_license = DriverLicenseSerializer(many=True) class Meta: model = Driver fields = (\"pk\", \"username\", \"first_name\", \"last_name\", \"email\", \"birthday\", \"passport\", \"address\", \"nationality\", \"driver_license\") Get driver with license and ownerships: views.py class RetrieveDriverAPIView(generics.RetrieveAPIView): serializer_class = RetrieveDriverSerializer queryset = Driver.objects.all() serializers.py class DriverOwnershipSerializer(serializers.ModelSerializer): class Meta: model = Ownership fields = \"__all__\" class RetrieveDriverSerializer(serializers.ModelSerializer): driver_ownership = DriverOwnershipSerializer(many=True, read_only=True) driver_license = DriverLicenseSerializer(many=True, read_only=True) class Meta: model = Driver fields = (\"pk\", \"username\", \"first_name\", \"last_name\", \"email\", \"birthday\", \"passport\", \"address\", \"nationality\", \"driver_license\", \"driver_ownership\") PUT and DELETE requests for driver: views.py class RetrieveDriverUpdateDestroyAPIView(generics.RetrieveUpdateDestroyAPIView): serializer_class = RetrieveDriverUpdateDestroySerializer queryset = Driver.objects.all() serializer.py class RetrieveDriverUpdateDestroySerializer(serializers.ModelSerializer): class Meta: model = Driver fields = \"__all__\" PW 3.3 Create README.md file. Add swagger at project. Add swagger: settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'cars_first_app', 'rest_framework', 'drf_yasg', ] urls.py from rest_framework import permissions from drf_yasg.views import get_schema_view from drf_yasg import openapi schema_view = get_schema_view( openapi.Info( title=\"API\", default_version='v2', description=\"Description\", terms_of_service=\"https://www.google.com/policies/terms/\", contact=openapi.Contact(email=\"hardbeat34@gmail.com\"), license=openapi.License(name=\"BSD License\"), ), public=True, permission_classes=(permissions.AllowAny,), ) urlpatterns = [ ..., path('doc/swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'), ]","title":"PW 3"},{"location":"PW3/pw3-tasks/#structure-of-practical-works","text":"PW 3.1 - Django Web framework PW 3.2 - Django rest framework PW 3.3 - Documentation","title":"Structure of practical works"},{"location":"PW3/pw3-tasks/#pw-31","text":"","title":"PW 3.1"},{"location":"PW3/pw3-tasks/#1-task","text":"practical3_1_1.py Script for adding data: from cars_first_app.models import * drivers = [] for i in range(1, 7): new_driver = Driver(username=f\"driver{i}\", first_name=f\"TestFN{i}\", last_name=f\"TestSN{i}\", birthday=f\"2000-07-0{i}\", passport=f\"111111111{i}\", password=\"123\") drivers.append(new_driver) new_driver.save() i = 1 for driver in drivers: new_license = DriverLicense(id_driver=driver, license_number=f\"111111111{i}\", type='B', issue_date=f\"2022-12-0{i}\") new_license.save() i += 1 cars = [] for i in range(1, 7): new_car = Car(license_plate=f\"a00{i}aa\", car_brand='Prototype', model=f\"v{i}\") cars.append(new_car) new_car.save() for i in range(len(drivers)): new_ownership = Ownership(id_driver=drivers[i], id_car=cars[i], start_date=f\"2020-01-0{i+1}\", end_date=f\"2022-12-0{i+1}\") new_ownership.save()","title":"1 task"},{"location":"PW3/pw3-tasks/#2-task","text":"models.py Add related_name into DriverLicense, Ownership models: class DriverLicense(models.Model): id_driver = models.ForeignKey(Driver, on_delete=models.CASCADE, related_name=\"driver_license\") license_number = models.CharField(max_length=10) type = models.CharField(max_length=10) issue_date = models.DateField() class Ownership(models.Model): id_driver = models.ForeignKey(Driver, on_delete=models.CASCADE, related_name=\"driver_ownership\") id_car = models.ForeignKey(Car, on_delete=models.CASCADE, related_name=\"car_ownership\") start_date = models.DateField(null=False, blank=False) end_date = models.DateField(null=True, blank=True) practical3_1_2.py Get all cars with \"Prototype\" brand: Car.objects.filter(car_brand=\"Prototype\") Get all drivers with \"Stive\" name: Driver.objects.filter(first_name=\"Stive\") Get driver license for random driver id: rand_id_driver = Driver.objects.get(first_name=\"TestFN5\").pk DriverLicense.objects.get(id_driver=rand_id_driver) Get all drivers who have a red car: Driver.objects.filter(driver_ownership__id_car__color=\"red\") Get all drivers who have car from 2020 year: Driver.objects.filter(driver_ownership__start_date__gte=\"2020-01-01\")","title":"2 task"},{"location":"PW3/pw3-tasks/#3-task","text":"practical3_1_3.py Get date of the oldest driver license: DriverLicense.objects.aggregate(oldest_license=Min('issue_date')) Get last date of ownership: Ownership.objects.aggregate(oldest_license=Max('start_date')) Get drivers and their ownerships: counter_car = Driver.objects.annotate(count_car=Count(\"driver_ownership\")) for driver in counter_car: print(driver.pk, driver.count_car) Get count of each brand cars: Car.objects.values(\"car_brand\").annotate(count=Count(\"id\")) Get drivers who sorted by issue date of license: Driver.objects.order_by('driver_license__issue_date')","title":"3 task"},{"location":"PW3/pw3-tasks/#pw-32","text":"","title":"PW 3.2"},{"location":"PW3/pw3-tasks/#1-task_1","text":"views.py Add two classes for GET and POST request for driver: class DriverAPIView(APIView): def get(self, request): drivers = Driver.objects.all() serializer = DriverSerializer(drivers, many=True) return Response({\"Drivers\": serializer.data}) class CreateDriverAPIView(APIView): def post(self, request): driver = request.data.get(\"driver\") serializer = CreateDriverSerializer(data=driver) if serializer.is_valid(raise_exception=True): driver_saved = serializer.save() return Response({\"Success\": \"Driver '{}' created succesfully.\".format(driver_saved.username)}) serializes.py For these classes serializers: class DriverSerializer(serializers.ModelSerializer): class Meta: model = Driver fields = \"__all__\" class CreateDriverSerializer(serializers.ModelSerializer): def create(self, validated_data): return Driver.objects.create(**validated_data) class Meta: model = Driver fields = \"__all__\"","title":"1 task"},{"location":"PW3/pw3-tasks/#2-task_1","text":"Get drivers with license: views.py class DriverAndLicenseAPIView(generics.ListAPIView): serializer_class = DriverAndLicenseSerializer queryset = Driver.objects.all() serializes.py class DriverLicenseSerializer(serializers.ModelSerializer): class Meta: model = DriverLicense fields = (\"pk\", \"license_number\", \"type\", \"issue_date\") class DriverAndLicenseSerializer(serializers.ModelSerializer): driver_license = DriverLicenseSerializer(many=True) class Meta: model = Driver fields = (\"pk\", \"username\", \"first_name\", \"last_name\", \"email\", \"birthday\", \"passport\", \"address\", \"nationality\", \"driver_license\") Get driver with license and ownerships: views.py class RetrieveDriverAPIView(generics.RetrieveAPIView): serializer_class = RetrieveDriverSerializer queryset = Driver.objects.all() serializers.py class DriverOwnershipSerializer(serializers.ModelSerializer): class Meta: model = Ownership fields = \"__all__\" class RetrieveDriverSerializer(serializers.ModelSerializer): driver_ownership = DriverOwnershipSerializer(many=True, read_only=True) driver_license = DriverLicenseSerializer(many=True, read_only=True) class Meta: model = Driver fields = (\"pk\", \"username\", \"first_name\", \"last_name\", \"email\", \"birthday\", \"passport\", \"address\", \"nationality\", \"driver_license\", \"driver_ownership\") PUT and DELETE requests for driver: views.py class RetrieveDriverUpdateDestroyAPIView(generics.RetrieveUpdateDestroyAPIView): serializer_class = RetrieveDriverUpdateDestroySerializer queryset = Driver.objects.all() serializer.py class RetrieveDriverUpdateDestroySerializer(serializers.ModelSerializer): class Meta: model = Driver fields = \"__all__\"","title":"2 task"},{"location":"PW3/pw3-tasks/#pw-33","text":"Create README.md file. Add swagger at project. Add swagger: settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'cars_first_app', 'rest_framework', 'drf_yasg', ] urls.py from rest_framework import permissions from drf_yasg.views import get_schema_view from drf_yasg import openapi schema_view = get_schema_view( openapi.Info( title=\"API\", default_version='v2', description=\"Description\", terms_of_service=\"https://www.google.com/policies/terms/\", contact=openapi.Contact(email=\"hardbeat34@gmail.com\"), license=openapi.License(name=\"BSD License\"), ), public=True, permission_classes=(permissions.AllowAny,), ) urlpatterns = [ ..., path('doc/swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'), ]","title":"PW 3.3"}]}