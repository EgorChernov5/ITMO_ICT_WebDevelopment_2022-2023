{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to my doc! Some information: Name: Chernov Egor Konstantinovich University: ITMO, 09.03.03 Group: k33401 Contacts: vk.com , telgram Completed labs: Lab 1 - Work with sockets. Lab 2 - Create a site on Djando. Processed labs: Lab 3 - Work with Django REST Framework. Server side, API. Lab 4 - Work with Vue.JS. Client side.","title":"Home"},{"location":"#welcome-to-my-doc","text":"","title":"Welcome to my doc!"},{"location":"#some-information","text":"Name: Chernov Egor Konstantinovich University: ITMO, 09.03.03 Group: k33401 Contacts: vk.com , telgram","title":"Some information:"},{"location":"#completed-labs","text":"Lab 1 - Work with sockets. Lab 2 - Create a site on Djando.","title":"Completed labs:"},{"location":"#processed-labs","text":"Lab 3 - Work with Django REST Framework. Server side, API. Lab 4 - Work with Vue.JS. Client side.","title":"Processed labs:"},{"location":"Lr1/lr1-tasks/","text":"Task 1 ServerSide.py import socket sock = socket.socket() # if \"127.0.0.1\" - connect only my cp host, if \"0.0.0.0\"- connect all hosts # 8080 - port sock.bind((\"\", 8080)) # set listening and queue size sock.listen(1) # accept() return client socket and client address # \u0410\u0434\u0440\u0435\u0441 \u2014 \u043c\u0430\u0441\u0441\u0438\u0432, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u0438\u0437 IP-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u043f\u043e\u0440\u0442\u0430 conn, addr = sock.accept() # get data data = conn.recv(16384) decodeData = data.decode(\"utf-8\") print(\"Server: \" + decodeData) # two ways for send data, in both ways data should be encoded massage = \"Hello, client\" # conn.send(b\"Hello, client\\n\") conn.send(massage.encode(\"utf-8\")) # close connection conn.close() ClientSide.py import socket sock = socket.socket() # connect to port which is listening server sock.connect((\"127.0.0.1\", 8080)) massage = \"Hello, server\" sock.send(massage.encode(\"utf-8\")) data = sock.recv(16384) decodeData = data.decode(\"utf-8\") print(\"Client: \" + decodeData) Task 2 ServerSide.py import socket import math def math_square(m_data): split_str = m_data.split() if split_str[0] == \"a\": return int(split_str[1]) * int(split_str[2]) elif split_str[0] == \"b\": return int(split_str[1]) * int(split_str[2]) * math.sin(math.radians(int(split_str[3]))) elif split_str[0] == \"c\": return (1 / 2) * int(split_str[1]) * int(split_str[2]) * math.sin(math.radians(int(split_str[3]))) else: return 0 sock = socket.socket() sock.bind((\"\", 8080)) sock.listen(1) conn, addr = sock.accept() try: while 1: try: conn.settimeout(10) data = conn.recv(16384) if not data: break decoded_data = data.decode(\"utf-8\") massage_out = str(math_square(decoded_data)) conn.send(massage_out.encode(\"utf-8\")) except socket.error: print(\"connection timed out\") break finally: conn.close() finally: sock.close() ClientSide.py import socket sock = socket.socket() sock.connect((\"127.0.0.1\", 8080)) massage = input(\"Which formula do you prefer?\\na. S = a*h\\nb. S = a*b*sin(a^b)\\n\" \"c. S = 0.5*d1*d2+sin(d1^d2)\\nInput latter and params: \") sock.send(massage.encode(\"utf-8\")) sock.settimeout(1) data = sock.recv(16384) decodeData = data.decode(\"utf-8\") print(\"Answer: \" + decodeData) Task 3 ServerSide.py import socket import os with socket.socket() as s: s.bind(('', 8080)) s.listen(1) conn, addr = s.accept() with conn: work_path = os.getcwd() res_path = ('\\\\'.join(work_path.split('\\\\')[:-1]) + '\\\\res\\\\index.html').replace('\\\\', '/') with open(res_path) as fin: message = fin.read() print(conn.recv(16348).decode('utf-8')) response = 'HTTP/1.0 200 OK\\n\\n' + message conn.sendall(response.encode('utf-8')) ClientSide.py import socket with socket.socket() as s: s.connect(('127.0.0.1', 8080)) s.settimeout(5) s.send(b\"GET / HTTP/1.1\\n\") data = s.recv(16384) decodeData = data.decode('utf-8') print(decodeData) index.html <!doctype html> <html> <head> <meta charset=\"utf-8\"> <title>Title</title> </head> <body> <h1>My first title</h1> <p>My first article</p> </body> </html> Task 4 ServerSide.py import socket import threading def accept(): while 1: try: conn, addr = s.accept() print(f\"New user {conn.getpeername()[1]} was added\") conn.send(b\"...Write \\\"/exit\\\" for live this chat...\\n\") message = f\"...New member: {addr[1]}...\\n\" for user in users: user.send(message.encode('utf-8')) users.append(conn) # Start a thread which receives messages t_in = threading.Thread(target=in_data, name='in', args=(conn,)) t_in.start() except socket.error: break def in_data(t_conn): t_user = t_conn.getpeername()[1] while 1: try: data = t_conn.recv(1024) decode_data = data.decode('utf-8') # Start a thread which sends messages t_out = threading.Thread(target=out_data, name='out', args=(t_conn, decode_data, ), daemon=True) t_out.start() t_out.join() except socket.error: print(f\"User {t_user} left\") break def out_data(t_conn, message): t_user = t_conn.getpeername()[1] if message == '/exit': users.remove(t_conn) specific_message = f\"...User {t_user} left...\\n\".encode('utf-8') t_conn.close() else: specific_message = f\"User {t_user}: {message}\".encode('utf-8') for user in users: if user == t_conn: continue user.send(specific_message) if __name__ == \"__main__\": with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: host = '' port = 8080 s.bind((host, port)) s.listen(5) users = [] print('Chat\\'s started') # Start a thread which accepts sockets t_accept = threading.Thread(target=accept, name='accept', daemon=True) t_accept.start() while 1: # Checking server shutdown check = input('Write \\\"/terminate\\\" to stop this chat\\n') if check == '/terminate': s.close() print('Chat\\' stopped') break User1.py import socket import threading import time def out_data(): time.sleep(2) m = 'Hi, i\\'m 0\\n' s.send(m.encode('utf-8')) print(f'You ({s.getsockname()[1]}): {m}') time.sleep(5) m = 'What?\\n' s.send(m.encode('utf-8')) print(f'You ({s.getsockname()[1]}): {m}') time.sleep(4) m = 'No, it\\'s you!\\n' s.send(m.encode('utf-8')) print(f'You ({s.getsockname()[1]}): No, {m}') time.sleep(5) s.send(b'/exit') if __name__ == \"__main__\": with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: host = '127.0.0.1' port = 8080 s.connect((host, port)) t = threading.Thread(target=out_data, name='out', daemon=True) i = 1 while 1: try: in_data = s.recv(1024) decodeData = in_data.decode(\"utf-8\") if not in_data: print('You left the chat') break print(decodeData) if i: print('You have joined the chat') t.start() i -= 1 except socket.error: print('Server was terminated') break User2.py import socket import threading import time def out_data(): time.sleep(2) m = 'Hiii, i\\'m 1\\n' s.send(m.encode('utf-8')) print(f'You ({s.getsockname()[1]}): {m}') m = 'Sgsvd...\\n' s.send(m.encode('utf-8')) print(f'You ({s.getsockname()[1]}): {m}') time.sleep(4) m = 'You loser?\\n' s.send(m.encode('utf-8')) print(f'You ({s.getsockname()[1]}): {m}') time.sleep(5) s.send(b'/exit') if __name__ == \"__main__\": with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: host = '127.0.0.1' port = 8080 s.connect((host, port)) t = threading.Thread(target=out_data, name='out', daemon=True) i = 1 while 1: try: in_data = s.recv(1024) decodeData = in_data.decode(\"utf-8\") if not in_data: print('You left the chat') break print(decodeData) if i: print('You have joined the chat') t.start() i -= 1 except socket.error: print('Server was terminated') break Task 5 MyHTTPServer.py import os import socket from email.parser import Parser from HTTPError import HTTPError from Response import Response from Request import Request MAX_HEADERS = 100 class MyHTTPServer: def __init__(self, host, port): self._host = host self._port = port self._subjects = {} def serve_forever(self): serv_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: serv_sock.bind((self._host, self._port)) serv_sock.listen(1) while True: conn, _ = serv_sock.accept() try: self.serve_client(conn) except Exception as e: print('Client serving failed', e) finally: serv_sock.close() def serve_client(self, conn): try: # Parse request and return Request(method, target, ver, headers, rfile) req = self.parse_request(conn) # Return Response(200, 'OK', headers, body) resp = self.handle_request(req) self.send_response(conn, resp) except Exception as e: self.send_error(conn, e) if conn: req.rfile.close() conn.close() def parse_request(self, conn): rfile = conn.makefile('rb') method, target, ver = self.parse_request_line(rfile) headers = self.parse_headers(rfile) return Request(method, target, ver, headers, rfile) def parse_request_line(self, rfile): raw = rfile.readline() req_line = str(raw, 'utf-8') words = req_line.split() if len(words) != 3: raise HTTPError(400, 'Bad request', ) method, target, ver = words if ver != 'HTTP/1.1': raise HTTPError(505, 'HTTP Version Not Supported') return method, target, ver def parse_headers(self, rfile): headers = [] while True: line = rfile.readline() if line in (b'\\r\\n', b'\\n', b''): break headers.append(line) if len(headers) > MAX_HEADERS: raise HTTPError(494, 'Too many headers') sheaders = b''.join(headers).decode('utf-8') return Parser().parsestr(sheaders) def parse_values(self, req_values): param = req_values.decode('utf-8').split('&') subject = param[0][len('subject='):] grade = param[1][len('grade='):] if not subject or not grade: raise HTTPError(400, 'Bad request', 'Params missing') return subject, grade def handle_request(self, req): if req.target == '/welcome' and req.method == 'GET': return self.handle_get_welcome() if req.method == 'POST': return self.handle_post_subjects(req) if req.target.startswith('/subjects') and req.method == 'GET': return self.handle_get_subjects() raise HTTPError(404, 'Not found') def send_response(self, conn, resp): wfile = conn.makefile('wb') status_line = f'HTTP/1.1 {resp.status} {resp.reason}\\r\\n' wfile.write(status_line.encode('utf-8')) if resp.headers: for (key, value) in resp.headers: header_line = f'{key}: {value}\\r\\n' wfile.write(header_line.encode('utf-8')) wfile.write(b'\\r\\n') if resp.body: wfile.write(resp.body) wfile.flush() wfile.close() def send_error(self, conn, err): try: status = err.status reason = err.reason body = (err.body or err.reason).encode('utf-8') except Exception: status = 500 reason = b'Internal Server Error' body = b'Internal Server Error' resp = Response(status, reason, [('Content-Length', len(body))], body) self.send_response(conn, resp) def handle_get_welcome(self): content_type = 'text/html; charset=utf-8' work_path = os.getcwd() res_path = ('\\\\'.join(work_path.split('\\\\')[:-1]) + '\\\\res\\\\welcome.html').replace('\\\\', '/') with open(res_path) as fin: body = fin.read() body = body.encode('utf-8') headers = [('Content-Type', content_type), ('Content-Length', len(body))] return Response(200, 'OK', headers, body) def handle_post_subjects(self, req): req_values = req.rfile.readline() subject, grade = self.parse_values(req_values) subject_id = len(self._subjects) + 1 self._subjects[subject_id] = {'id': subject_id, 'subject': subject, 'grade': grade} return Response(204, 'Created') def handle_get_subjects(self): content_type = 'text/html; charset=utf-8' body = '<html><head></head><body>' body += f'<div>Count of subjects: {len(self._subjects)}</div>' body += '<ul>' for u in self._subjects.values(): body += f'<li>{u[\"subject\"]}, {u[\"grade\"]}</li>' body += '</ul>' body += '</body></html>' body = body.encode('utf-8') headers = [('Content-Type', content_type), ('Content-Length', len(body))] return Response(200, 'OK', headers, body) if __name__ == '__main__': s_host = '' s_port = 8080 serv = MyHTTPServer(s_host, s_port) try: serv.serve_forever() except KeyboardInterrupt: pass HTTPError.py class HTTPError(Exception): def __init__(self, status, reason, body=None): super() self.status = status self.reason = reason self.body = body Response.py class Response: def __init__(self, status, reason, headers=None, body=None): self.status = status self.reason = reason self.headers = headers self.body = body Request.py class Request: def __init__(self, method, target, version, headers, rfile): self.method = method self.target = target self.version = version self.headers = headers self.rfile = rfile def body(self): size = self.headers.get('Content-Length') if not size: return None return self.rfile.read(size) welcome.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta content=\"text/html\" charset=\"UTF-8\"> <title>List of subjects</title> </head> <body> <h1>List of subjects</h1> <form action=\"\" method=\"POST\"> <p>Write a subject:</p> <input type=\"text\" name=\"subject\" id=\"subject\" placeholder=\"Math\"> <p>Write a grade:</p> <input type=\"text\" name=\"grade\" id=\"grade\" placeholder=\"1-5\"><br> <br> <button type=\"submit\" name=\"add_subject\" id=add_subject\">Add subject</button> </form> <br> <form action=\"/subjects\" method=\"GET\"> <button type=\"submit\" name=\"see_subjects\" id=\"see_subjects\">See subjects</button> </form> </body> </html>","title":"Lab 1"},{"location":"Lr1/lr1-tasks/#task-1","text":"ServerSide.py import socket sock = socket.socket() # if \"127.0.0.1\" - connect only my cp host, if \"0.0.0.0\"- connect all hosts # 8080 - port sock.bind((\"\", 8080)) # set listening and queue size sock.listen(1) # accept() return client socket and client address # \u0410\u0434\u0440\u0435\u0441 \u2014 \u043c\u0430\u0441\u0441\u0438\u0432, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u0438\u0437 IP-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u043f\u043e\u0440\u0442\u0430 conn, addr = sock.accept() # get data data = conn.recv(16384) decodeData = data.decode(\"utf-8\") print(\"Server: \" + decodeData) # two ways for send data, in both ways data should be encoded massage = \"Hello, client\" # conn.send(b\"Hello, client\\n\") conn.send(massage.encode(\"utf-8\")) # close connection conn.close() ClientSide.py import socket sock = socket.socket() # connect to port which is listening server sock.connect((\"127.0.0.1\", 8080)) massage = \"Hello, server\" sock.send(massage.encode(\"utf-8\")) data = sock.recv(16384) decodeData = data.decode(\"utf-8\") print(\"Client: \" + decodeData)","title":"Task 1"},{"location":"Lr1/lr1-tasks/#task-2","text":"ServerSide.py import socket import math def math_square(m_data): split_str = m_data.split() if split_str[0] == \"a\": return int(split_str[1]) * int(split_str[2]) elif split_str[0] == \"b\": return int(split_str[1]) * int(split_str[2]) * math.sin(math.radians(int(split_str[3]))) elif split_str[0] == \"c\": return (1 / 2) * int(split_str[1]) * int(split_str[2]) * math.sin(math.radians(int(split_str[3]))) else: return 0 sock = socket.socket() sock.bind((\"\", 8080)) sock.listen(1) conn, addr = sock.accept() try: while 1: try: conn.settimeout(10) data = conn.recv(16384) if not data: break decoded_data = data.decode(\"utf-8\") massage_out = str(math_square(decoded_data)) conn.send(massage_out.encode(\"utf-8\")) except socket.error: print(\"connection timed out\") break finally: conn.close() finally: sock.close() ClientSide.py import socket sock = socket.socket() sock.connect((\"127.0.0.1\", 8080)) massage = input(\"Which formula do you prefer?\\na. S = a*h\\nb. S = a*b*sin(a^b)\\n\" \"c. S = 0.5*d1*d2+sin(d1^d2)\\nInput latter and params: \") sock.send(massage.encode(\"utf-8\")) sock.settimeout(1) data = sock.recv(16384) decodeData = data.decode(\"utf-8\") print(\"Answer: \" + decodeData)","title":"Task 2"},{"location":"Lr1/lr1-tasks/#task-3","text":"ServerSide.py import socket import os with socket.socket() as s: s.bind(('', 8080)) s.listen(1) conn, addr = s.accept() with conn: work_path = os.getcwd() res_path = ('\\\\'.join(work_path.split('\\\\')[:-1]) + '\\\\res\\\\index.html').replace('\\\\', '/') with open(res_path) as fin: message = fin.read() print(conn.recv(16348).decode('utf-8')) response = 'HTTP/1.0 200 OK\\n\\n' + message conn.sendall(response.encode('utf-8')) ClientSide.py import socket with socket.socket() as s: s.connect(('127.0.0.1', 8080)) s.settimeout(5) s.send(b\"GET / HTTP/1.1\\n\") data = s.recv(16384) decodeData = data.decode('utf-8') print(decodeData) index.html <!doctype html> <html> <head> <meta charset=\"utf-8\"> <title>Title</title> </head> <body> <h1>My first title</h1> <p>My first article</p> </body> </html>","title":"Task 3"},{"location":"Lr1/lr1-tasks/#task-4","text":"ServerSide.py import socket import threading def accept(): while 1: try: conn, addr = s.accept() print(f\"New user {conn.getpeername()[1]} was added\") conn.send(b\"...Write \\\"/exit\\\" for live this chat...\\n\") message = f\"...New member: {addr[1]}...\\n\" for user in users: user.send(message.encode('utf-8')) users.append(conn) # Start a thread which receives messages t_in = threading.Thread(target=in_data, name='in', args=(conn,)) t_in.start() except socket.error: break def in_data(t_conn): t_user = t_conn.getpeername()[1] while 1: try: data = t_conn.recv(1024) decode_data = data.decode('utf-8') # Start a thread which sends messages t_out = threading.Thread(target=out_data, name='out', args=(t_conn, decode_data, ), daemon=True) t_out.start() t_out.join() except socket.error: print(f\"User {t_user} left\") break def out_data(t_conn, message): t_user = t_conn.getpeername()[1] if message == '/exit': users.remove(t_conn) specific_message = f\"...User {t_user} left...\\n\".encode('utf-8') t_conn.close() else: specific_message = f\"User {t_user}: {message}\".encode('utf-8') for user in users: if user == t_conn: continue user.send(specific_message) if __name__ == \"__main__\": with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: host = '' port = 8080 s.bind((host, port)) s.listen(5) users = [] print('Chat\\'s started') # Start a thread which accepts sockets t_accept = threading.Thread(target=accept, name='accept', daemon=True) t_accept.start() while 1: # Checking server shutdown check = input('Write \\\"/terminate\\\" to stop this chat\\n') if check == '/terminate': s.close() print('Chat\\' stopped') break User1.py import socket import threading import time def out_data(): time.sleep(2) m = 'Hi, i\\'m 0\\n' s.send(m.encode('utf-8')) print(f'You ({s.getsockname()[1]}): {m}') time.sleep(5) m = 'What?\\n' s.send(m.encode('utf-8')) print(f'You ({s.getsockname()[1]}): {m}') time.sleep(4) m = 'No, it\\'s you!\\n' s.send(m.encode('utf-8')) print(f'You ({s.getsockname()[1]}): No, {m}') time.sleep(5) s.send(b'/exit') if __name__ == \"__main__\": with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: host = '127.0.0.1' port = 8080 s.connect((host, port)) t = threading.Thread(target=out_data, name='out', daemon=True) i = 1 while 1: try: in_data = s.recv(1024) decodeData = in_data.decode(\"utf-8\") if not in_data: print('You left the chat') break print(decodeData) if i: print('You have joined the chat') t.start() i -= 1 except socket.error: print('Server was terminated') break User2.py import socket import threading import time def out_data(): time.sleep(2) m = 'Hiii, i\\'m 1\\n' s.send(m.encode('utf-8')) print(f'You ({s.getsockname()[1]}): {m}') m = 'Sgsvd...\\n' s.send(m.encode('utf-8')) print(f'You ({s.getsockname()[1]}): {m}') time.sleep(4) m = 'You loser?\\n' s.send(m.encode('utf-8')) print(f'You ({s.getsockname()[1]}): {m}') time.sleep(5) s.send(b'/exit') if __name__ == \"__main__\": with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: host = '127.0.0.1' port = 8080 s.connect((host, port)) t = threading.Thread(target=out_data, name='out', daemon=True) i = 1 while 1: try: in_data = s.recv(1024) decodeData = in_data.decode(\"utf-8\") if not in_data: print('You left the chat') break print(decodeData) if i: print('You have joined the chat') t.start() i -= 1 except socket.error: print('Server was terminated') break","title":"Task 4"},{"location":"Lr1/lr1-tasks/#task-5","text":"MyHTTPServer.py import os import socket from email.parser import Parser from HTTPError import HTTPError from Response import Response from Request import Request MAX_HEADERS = 100 class MyHTTPServer: def __init__(self, host, port): self._host = host self._port = port self._subjects = {} def serve_forever(self): serv_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: serv_sock.bind((self._host, self._port)) serv_sock.listen(1) while True: conn, _ = serv_sock.accept() try: self.serve_client(conn) except Exception as e: print('Client serving failed', e) finally: serv_sock.close() def serve_client(self, conn): try: # Parse request and return Request(method, target, ver, headers, rfile) req = self.parse_request(conn) # Return Response(200, 'OK', headers, body) resp = self.handle_request(req) self.send_response(conn, resp) except Exception as e: self.send_error(conn, e) if conn: req.rfile.close() conn.close() def parse_request(self, conn): rfile = conn.makefile('rb') method, target, ver = self.parse_request_line(rfile) headers = self.parse_headers(rfile) return Request(method, target, ver, headers, rfile) def parse_request_line(self, rfile): raw = rfile.readline() req_line = str(raw, 'utf-8') words = req_line.split() if len(words) != 3: raise HTTPError(400, 'Bad request', ) method, target, ver = words if ver != 'HTTP/1.1': raise HTTPError(505, 'HTTP Version Not Supported') return method, target, ver def parse_headers(self, rfile): headers = [] while True: line = rfile.readline() if line in (b'\\r\\n', b'\\n', b''): break headers.append(line) if len(headers) > MAX_HEADERS: raise HTTPError(494, 'Too many headers') sheaders = b''.join(headers).decode('utf-8') return Parser().parsestr(sheaders) def parse_values(self, req_values): param = req_values.decode('utf-8').split('&') subject = param[0][len('subject='):] grade = param[1][len('grade='):] if not subject or not grade: raise HTTPError(400, 'Bad request', 'Params missing') return subject, grade def handle_request(self, req): if req.target == '/welcome' and req.method == 'GET': return self.handle_get_welcome() if req.method == 'POST': return self.handle_post_subjects(req) if req.target.startswith('/subjects') and req.method == 'GET': return self.handle_get_subjects() raise HTTPError(404, 'Not found') def send_response(self, conn, resp): wfile = conn.makefile('wb') status_line = f'HTTP/1.1 {resp.status} {resp.reason}\\r\\n' wfile.write(status_line.encode('utf-8')) if resp.headers: for (key, value) in resp.headers: header_line = f'{key}: {value}\\r\\n' wfile.write(header_line.encode('utf-8')) wfile.write(b'\\r\\n') if resp.body: wfile.write(resp.body) wfile.flush() wfile.close() def send_error(self, conn, err): try: status = err.status reason = err.reason body = (err.body or err.reason).encode('utf-8') except Exception: status = 500 reason = b'Internal Server Error' body = b'Internal Server Error' resp = Response(status, reason, [('Content-Length', len(body))], body) self.send_response(conn, resp) def handle_get_welcome(self): content_type = 'text/html; charset=utf-8' work_path = os.getcwd() res_path = ('\\\\'.join(work_path.split('\\\\')[:-1]) + '\\\\res\\\\welcome.html').replace('\\\\', '/') with open(res_path) as fin: body = fin.read() body = body.encode('utf-8') headers = [('Content-Type', content_type), ('Content-Length', len(body))] return Response(200, 'OK', headers, body) def handle_post_subjects(self, req): req_values = req.rfile.readline() subject, grade = self.parse_values(req_values) subject_id = len(self._subjects) + 1 self._subjects[subject_id] = {'id': subject_id, 'subject': subject, 'grade': grade} return Response(204, 'Created') def handle_get_subjects(self): content_type = 'text/html; charset=utf-8' body = '<html><head></head><body>' body += f'<div>Count of subjects: {len(self._subjects)}</div>' body += '<ul>' for u in self._subjects.values(): body += f'<li>{u[\"subject\"]}, {u[\"grade\"]}</li>' body += '</ul>' body += '</body></html>' body = body.encode('utf-8') headers = [('Content-Type', content_type), ('Content-Length', len(body))] return Response(200, 'OK', headers, body) if __name__ == '__main__': s_host = '' s_port = 8080 serv = MyHTTPServer(s_host, s_port) try: serv.serve_forever() except KeyboardInterrupt: pass HTTPError.py class HTTPError(Exception): def __init__(self, status, reason, body=None): super() self.status = status self.reason = reason self.body = body Response.py class Response: def __init__(self, status, reason, headers=None, body=None): self.status = status self.reason = reason self.headers = headers self.body = body Request.py class Request: def __init__(self, method, target, version, headers, rfile): self.method = method self.target = target self.version = version self.headers = headers self.rfile = rfile def body(self): size = self.headers.get('Content-Length') if not size: return None return self.rfile.read(size) welcome.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta content=\"text/html\" charset=\"UTF-8\"> <title>List of subjects</title> </head> <body> <h1>List of subjects</h1> <form action=\"\" method=\"POST\"> <p>Write a subject:</p> <input type=\"text\" name=\"subject\" id=\"subject\" placeholder=\"Math\"> <p>Write a grade:</p> <input type=\"text\" name=\"grade\" id=\"grade\" placeholder=\"1-5\"><br> <br> <button type=\"submit\" name=\"add_subject\" id=add_subject\">Add subject</button> </form> <br> <form action=\"/subjects\" method=\"GET\"> <button type=\"submit\" name=\"see_subjects\" id=\"see_subjects\">See subjects</button> </form> </body> </html>","title":"Task 5"},{"location":"Lr2/lr2-tasks/","text":"Structure of project hotel - settings folder account - authentication and registration app hotel_first_app - main app templates - folder with html files hotel settings.py Add configurations: INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'hotel_first_app.apps.HotelFirstAppConfig', 'account.apps.AccountConfig' ] Set path to templates folder: TEMPLATES = [ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [BASE_DIR / 'templates'], 'APP_DIRS': True, 'OPTIONS': { 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, }, ] Change configurations for database: DATABASES = { 'default': { \"ENGINE\": \"django.db.backends.postgresql\", \"NAME\": \"django_hotel\", \"USER\": \"postgres\", \"PASSWORD\": \"Rabotadb123\", \"HOST\": \"localhost\", \"PORT\": \"5433\", } } Set auth user: AUTH_USER_MODEL = 'Account.User' urls.py from django.contrib import admin from django.urls import include, path urlpatterns = [ path('admin/', admin.site.urls), path('', include('account.urls')), ] account models.py from django.contrib.auth.models import AbstractUser class User(AbstractUser): pass urls.py from django.urls import path, include from .views import * urlpatterns = [ path('', RegView.as_view(), name='index'), path('error/', error, name='error'), path('login/', LogInView.as_view(), name='login'), path('logout/', LogOutView.as_view(), name='logout'), path('hotels/', include('hotel_first_app.urls')), path('account/<int:pk>/', AccountUserView.as_view(), name='account'), path('account/<int:id_user>/update/<int:pk>', UpdateReserveView.as_view(), name='update_reserve'), path('account/<int:id_user>/delete/<int:pk>', ReserveDeleteView.as_view(), name='delete_reserve'), ] views.py from django.contrib.auth import authenticate, login from django.contrib.auth.models import User from django.contrib.auth.views import LoginView, LogoutView from django.shortcuts import render, redirect from django.urls import reverse_lazy from django.views.generic import CreateView, UpdateView, DeleteView from datetime import date from .forms import * from hotel_first_app.models import Registration class ReserveDeleteView(DeleteView): model = Registration template_name = 'delete_reserve.html' success_url = '/hotels/hotels/' class UpdateReserveView(UpdateView): form_class = UpdateReserveForm template_name = 'update_reserve.html' context_object_name = 'reg' def get_queryset(self): self.success_url = f\"/account/{self.kwargs['id_user']}\" return Registration.objects.filter(pk=self.kwargs['pk']) class AccountUserView(UpdateView): form_class = AccountForm template_name = 'account.html' def get_context_data(self, **kwargs): context = super(AccountUserView, self).get_context_data(**kwargs) cur_date = date.today() month_ago_date = cur_date.replace(month=(cur_date.month - 1)) context['month_registrations'] = Registration.objects.filter(check_out__gte=month_ago_date) context['taken_registrations'] = Registration.objects.filter(status_reg=\"T\") context['booked_registrations'] = Registration.objects.filter(status_reg=\"B\") context['guest_registrations'] = Registration.objects.filter(id_guest=self.kwargs['pk']) context['guests'] = User.objects.filter(is_superuser=False) return context def get_queryset(self): self.success_url = f\"/account/{self.kwargs['pk']}\" return User.objects.filter(pk=self.kwargs['pk']) def error(request): return render(request, 'error.html') class RegView(CreateView): form_class = CustomUserCreationForm template_name = 'index.html' success_url = 'hotels' def post(self, request, *args, **kwargs): form = CustomUserCreationForm(request.POST) context = {'username': \"\"} if form.is_valid(): form.save() context['username'] = form.cleaned_data.get('username') user = authenticate(username=form.cleaned_data.get('username'), password=form.cleaned_data.get('password1')) login(request, user) return redirect('hotels') return render(request, 'error.html') class LogInView(LoginView): form_class = CustomAuthenticationForm template_name = 'login.html' def get_success_url(self): return reverse_lazy('hotels') class LogOutView(LogoutView): def get_success_url(self): return reverse_lazy('index') forms.py from django import forms from django.contrib.auth.forms import UserCreationForm, AuthenticationForm from .models import User from hotel_first_app.models import Registration class UpdateReserveForm(forms.ModelForm): class Meta: model = Registration fields = ('id_reg', 'id_employee', 'id_guest', 'id_room', 'status_reg', 'status_pay', 'check_in', 'check_out', 'booking') class AccountForm(forms.ModelForm): class Meta: model = User fields = ('username', 'first_name', 'last_name', 'email') class CustomUserCreationForm(UserCreationForm): class Meta: model = User fields = ('username', 'email',) class CustomAuthenticationForm(AuthenticationForm): class Meta: model = User fields = ('username', 'password') hotel_first_app models.py from django.db import models from django.core.validators import MinValueValidator, MaxValueValidator from account.models import User class Hotel(models.Model): id_hotel = models.IntegerField(primary_key=True, verbose_name='ID Hotel') name_hotel = models.CharField(max_length=100, verbose_name='Name') city_hotel = models.CharField(max_length=30, verbose_name='City') address_hotel = models.CharField(max_length=255, verbose_name='Address') rating_hotel = models.PositiveSmallIntegerField(validators=[MinValueValidator(1), MaxValueValidator(10)], null=True, blank=True, verbose_name='Rating') des_hotel = models.CharField(max_length=255, null=True, blank=True, verbose_name='Description') class Employee(models.Model): id_employee = models.IntegerField(primary_key=True, verbose_name='ID Employee') id_hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE, verbose_name='ID Hotel') first_name_employee = models.CharField(max_length=30, verbose_name='First name') last_name_employee = models.CharField(max_length=30, verbose_name='Last name') phone_employee = models.CharField(max_length=12, verbose_name='Phone') class Meta: ordering = [\"first_name_employee\", \"last_name_employee\"] class RoomType(models.Model): ECONOM = 'E' STANDARD = 'S' LUX = 'L' TYPE_CHOICES = [ (ECONOM, 'Econom'), (STANDARD, 'Standard'), (LUX, 'Lux'), ] id_rt = models.IntegerField(primary_key=True, verbose_name='ID Room type') id_hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE, verbose_name='ID Hotel') type_rt = models.CharField(max_length=1, choices=TYPE_CHOICES, verbose_name='Type') rating_rt = models.PositiveSmallIntegerField(validators=[MinValueValidator(1), MaxValueValidator(10)], null=True, blank=True, verbose_name='Rating') price_rt = models.PositiveIntegerField(verbose_name='Price') des_rt = models.CharField(max_length=255, null=True, blank=True, verbose_name='Description') class Meta: ordering = [\"id_rt\"] class Room(models.Model): FREE = 'F' TAKEN = 'T' BOOKED = 'B' STATUS_CHOICES = [ (FREE, 'Free'), (TAKEN, 'Taken'), (BOOKED, 'Booked'), ] id_room = models.IntegerField(primary_key=True, verbose_name='ID Room') id_hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE, verbose_name='ID Hotel') id_rt = models.ForeignKey(RoomType, on_delete=models.SET_NULL, null=True, verbose_name='ID Room type') number_room = models.IntegerField(verbose_name='Number') status_room = models.CharField(max_length=1, choices=STATUS_CHOICES, default='F', verbose_name='Status') review_room = models.CharField(max_length=255, null=True, blank=True, verbose_name='Review') class Meta: ordering = [\"number_room\"] class Registration(models.Model): TAKEN = 'T' BOOKED = 'B' PAID = 'YP' NO_PAID = 'NP' STATUS_REG_CHOICES = [ (TAKEN, 'Taken'), (BOOKED, 'Booked'), ] STATUS_PAY_CHOICES = [ (PAID, 'Paid for'), (NO_PAID, 'Not paid for'), ] id_reg = models.IntegerField(primary_key=True, verbose_name='ID Reg') id_employee = models.ForeignKey(Employee, on_delete=models.SET_NULL, null=True, verbose_name='ID Employee') id_guest = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, verbose_name='ID Guest') id_room = models.ForeignKey(Room, on_delete=models.SET_NULL, null=True, verbose_name='ID Room') status_reg = models.CharField(max_length=1, choices=STATUS_REG_CHOICES, verbose_name='Registration status') status_pay = models.CharField(max_length=2, choices=STATUS_PAY_CHOICES, verbose_name='Payment status') check_in = models.DateField(null=False, blank=False, verbose_name='Check in') check_out = models.DateField(null=False, blank=False, verbose_name='Check out') booking = models.DateField(null=False, blank=False, verbose_name='Booking date') class Meta: ordering = [\"-check_in\", \"-check_out\"] class Comment(models.Model): id_guest = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, verbose_name='ID Guest') id_room = models.ForeignKey(Room, on_delete=models.CASCADE, null=True, verbose_name='ID Room') username = models.CharField(max_length=30) rating_c = models.PositiveSmallIntegerField(validators=[MinValueValidator(1), MaxValueValidator(10)], verbose_name='Rating') review_c = models.TextField(max_length=255, null=True, blank=True, verbose_name='Review') check_in = models.DateField(null=False, blank=False, verbose_name='Check in') check_out = models.DateField(null=False, blank=False, verbose_name='Check out') urls.py from django.urls import path from .views import * urlpatterns = [ path('hotels/', HotelListView.as_view(), name='hotels'), path('hotels/<int:pk>/', HotelView.as_view(), name='hotel'), path('hotels/<int:id_hotel>/<int:id_rt>/rooms/', RoomListView.as_view(), name='hotel-rooms'), path('hotels/<int:id_hotel>/<int:id_rt>/rooms/<int:pk>/', RoomView.as_view(), name='room'), path('hotels/<int:id_hotel>/<int:id_rt>/rooms/<int:id_room>/comment/', CommentView.as_view(), name='comment'), path('reserve/', ReserveView.as_view(), name='reserve'), ] views.py from django.shortcuts import render, redirect from django.views.generic import CreateView, ListView, DetailView from .forms import * from .models import * class ReserveView(CreateView): form_class = ReserveForm template_name = 'reserve.html' def post(self, request, *args, **kwargs): form = ReserveForm(request.POST) if form.is_valid(): form.save() print(request) return redirect('hotels') return render(request, 'error.html') class CommentView(CreateView): form_class = CommentForm template_name = 'comment.html' def get_context_data(self, **kwargs): context = super(CommentView, self).get_context_data(**kwargs) context['hotel'] = Hotel.objects.get(pk=self.kwargs['id_hotel']) context['room_type'] = RoomType.objects.get(pk=self.kwargs['id_rt']) context['room'] = Room.objects.get(pk=self.kwargs['id_room']) return context def get(self, request, *args, **kwargs): form = CommentForm() context = {'form': form, 'hotel': Hotel.objects.get(pk=self.kwargs['id_hotel']), 'room_type': RoomType.objects.get(pk=self.kwargs['id_rt']), 'room': Room.objects.get(pk=self.kwargs['id_room'])} return render(request, 'comment.html', context) def post(self, request, *args, **kwargs): form = CommentForm(request.POST) if form.is_valid(): form.save() print(request) return redirect('room', id_hotel=self.kwargs['id_hotel'], id_rt=self.kwargs['id_rt'], pk=self.kwargs['id_room']) return render(request, 'error.html') class RoomView(DetailView): model = Room template_name = 'room.html' context_object_name = 'room' def get_context_data(self, **kwargs): context = super(RoomView, self).get_context_data(**kwargs) context['hotel'] = Hotel.objects.get(pk=self.kwargs['id_hotel']) context['room_type'] = RoomType.objects.get(pk=self.kwargs['id_rt']) context['comments'] = Comment.objects.filter(id_room=self.kwargs['pk']) return context class RoomListView(ListView): model = Room template_name = 'rooms.html' context_object_name = 'rooms' def get_context_data(self, **kwargs): context = super(RoomListView, self).get_context_data(**kwargs) context['hotel'] = Hotel.objects.get(pk=self.kwargs['id_hotel']) context['room_type'] = RoomType.objects.get(pk=self.kwargs['id_rt']) return context def get_queryset(self): return Room.objects.filter(id_rt=self.kwargs['id_rt']) class HotelView(DetailView): model = Hotel template_name = 'hotel.html' context_object_name = 'hotel' def get_context_data(self, **kwargs): context = super(HotelView, self).get_context_data(**kwargs) context['room_types'] = RoomType.objects.filter(id_hotel=self.kwargs['pk']) return context class HotelListView(ListView): model = Hotel template_name = 'hotels.html' context_object_name = 'hotels' def get_context_data(self, *, object_list=None, **kwargs): context = super(HotelListView, self).get_context_data(**kwargs) return context forms.py from django import forms from .models import Comment from .models import Registration class ReserveForm(forms.ModelForm): class Meta: model = Registration fields = ('id_reg', 'id_employee', 'id_guest', 'id_room', 'status_reg', 'status_pay', 'check_in', 'check_out', 'booking') class CommentForm(forms.ModelForm): class Meta: model = Comment fields = ('id_guest', 'id_room', 'username', 'rating_c', 'review_c', 'check_in', 'check_out')","title":"Lab 2"},{"location":"Lr2/lr2-tasks/#structure-of-project","text":"hotel - settings folder account - authentication and registration app hotel_first_app - main app templates - folder with html files","title":"Structure of project"},{"location":"Lr2/lr2-tasks/#hotel","text":"settings.py Add configurations: INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'hotel_first_app.apps.HotelFirstAppConfig', 'account.apps.AccountConfig' ] Set path to templates folder: TEMPLATES = [ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [BASE_DIR / 'templates'], 'APP_DIRS': True, 'OPTIONS': { 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, }, ] Change configurations for database: DATABASES = { 'default': { \"ENGINE\": \"django.db.backends.postgresql\", \"NAME\": \"django_hotel\", \"USER\": \"postgres\", \"PASSWORD\": \"Rabotadb123\", \"HOST\": \"localhost\", \"PORT\": \"5433\", } } Set auth user: AUTH_USER_MODEL = 'Account.User' urls.py from django.contrib import admin from django.urls import include, path urlpatterns = [ path('admin/', admin.site.urls), path('', include('account.urls')), ]","title":"hotel"},{"location":"Lr2/lr2-tasks/#account","text":"models.py from django.contrib.auth.models import AbstractUser class User(AbstractUser): pass urls.py from django.urls import path, include from .views import * urlpatterns = [ path('', RegView.as_view(), name='index'), path('error/', error, name='error'), path('login/', LogInView.as_view(), name='login'), path('logout/', LogOutView.as_view(), name='logout'), path('hotels/', include('hotel_first_app.urls')), path('account/<int:pk>/', AccountUserView.as_view(), name='account'), path('account/<int:id_user>/update/<int:pk>', UpdateReserveView.as_view(), name='update_reserve'), path('account/<int:id_user>/delete/<int:pk>', ReserveDeleteView.as_view(), name='delete_reserve'), ] views.py from django.contrib.auth import authenticate, login from django.contrib.auth.models import User from django.contrib.auth.views import LoginView, LogoutView from django.shortcuts import render, redirect from django.urls import reverse_lazy from django.views.generic import CreateView, UpdateView, DeleteView from datetime import date from .forms import * from hotel_first_app.models import Registration class ReserveDeleteView(DeleteView): model = Registration template_name = 'delete_reserve.html' success_url = '/hotels/hotels/' class UpdateReserveView(UpdateView): form_class = UpdateReserveForm template_name = 'update_reserve.html' context_object_name = 'reg' def get_queryset(self): self.success_url = f\"/account/{self.kwargs['id_user']}\" return Registration.objects.filter(pk=self.kwargs['pk']) class AccountUserView(UpdateView): form_class = AccountForm template_name = 'account.html' def get_context_data(self, **kwargs): context = super(AccountUserView, self).get_context_data(**kwargs) cur_date = date.today() month_ago_date = cur_date.replace(month=(cur_date.month - 1)) context['month_registrations'] = Registration.objects.filter(check_out__gte=month_ago_date) context['taken_registrations'] = Registration.objects.filter(status_reg=\"T\") context['booked_registrations'] = Registration.objects.filter(status_reg=\"B\") context['guest_registrations'] = Registration.objects.filter(id_guest=self.kwargs['pk']) context['guests'] = User.objects.filter(is_superuser=False) return context def get_queryset(self): self.success_url = f\"/account/{self.kwargs['pk']}\" return User.objects.filter(pk=self.kwargs['pk']) def error(request): return render(request, 'error.html') class RegView(CreateView): form_class = CustomUserCreationForm template_name = 'index.html' success_url = 'hotels' def post(self, request, *args, **kwargs): form = CustomUserCreationForm(request.POST) context = {'username': \"\"} if form.is_valid(): form.save() context['username'] = form.cleaned_data.get('username') user = authenticate(username=form.cleaned_data.get('username'), password=form.cleaned_data.get('password1')) login(request, user) return redirect('hotels') return render(request, 'error.html') class LogInView(LoginView): form_class = CustomAuthenticationForm template_name = 'login.html' def get_success_url(self): return reverse_lazy('hotels') class LogOutView(LogoutView): def get_success_url(self): return reverse_lazy('index') forms.py from django import forms from django.contrib.auth.forms import UserCreationForm, AuthenticationForm from .models import User from hotel_first_app.models import Registration class UpdateReserveForm(forms.ModelForm): class Meta: model = Registration fields = ('id_reg', 'id_employee', 'id_guest', 'id_room', 'status_reg', 'status_pay', 'check_in', 'check_out', 'booking') class AccountForm(forms.ModelForm): class Meta: model = User fields = ('username', 'first_name', 'last_name', 'email') class CustomUserCreationForm(UserCreationForm): class Meta: model = User fields = ('username', 'email',) class CustomAuthenticationForm(AuthenticationForm): class Meta: model = User fields = ('username', 'password')","title":"account"},{"location":"Lr2/lr2-tasks/#hotel_first_app","text":"models.py from django.db import models from django.core.validators import MinValueValidator, MaxValueValidator from account.models import User class Hotel(models.Model): id_hotel = models.IntegerField(primary_key=True, verbose_name='ID Hotel') name_hotel = models.CharField(max_length=100, verbose_name='Name') city_hotel = models.CharField(max_length=30, verbose_name='City') address_hotel = models.CharField(max_length=255, verbose_name='Address') rating_hotel = models.PositiveSmallIntegerField(validators=[MinValueValidator(1), MaxValueValidator(10)], null=True, blank=True, verbose_name='Rating') des_hotel = models.CharField(max_length=255, null=True, blank=True, verbose_name='Description') class Employee(models.Model): id_employee = models.IntegerField(primary_key=True, verbose_name='ID Employee') id_hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE, verbose_name='ID Hotel') first_name_employee = models.CharField(max_length=30, verbose_name='First name') last_name_employee = models.CharField(max_length=30, verbose_name='Last name') phone_employee = models.CharField(max_length=12, verbose_name='Phone') class Meta: ordering = [\"first_name_employee\", \"last_name_employee\"] class RoomType(models.Model): ECONOM = 'E' STANDARD = 'S' LUX = 'L' TYPE_CHOICES = [ (ECONOM, 'Econom'), (STANDARD, 'Standard'), (LUX, 'Lux'), ] id_rt = models.IntegerField(primary_key=True, verbose_name='ID Room type') id_hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE, verbose_name='ID Hotel') type_rt = models.CharField(max_length=1, choices=TYPE_CHOICES, verbose_name='Type') rating_rt = models.PositiveSmallIntegerField(validators=[MinValueValidator(1), MaxValueValidator(10)], null=True, blank=True, verbose_name='Rating') price_rt = models.PositiveIntegerField(verbose_name='Price') des_rt = models.CharField(max_length=255, null=True, blank=True, verbose_name='Description') class Meta: ordering = [\"id_rt\"] class Room(models.Model): FREE = 'F' TAKEN = 'T' BOOKED = 'B' STATUS_CHOICES = [ (FREE, 'Free'), (TAKEN, 'Taken'), (BOOKED, 'Booked'), ] id_room = models.IntegerField(primary_key=True, verbose_name='ID Room') id_hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE, verbose_name='ID Hotel') id_rt = models.ForeignKey(RoomType, on_delete=models.SET_NULL, null=True, verbose_name='ID Room type') number_room = models.IntegerField(verbose_name='Number') status_room = models.CharField(max_length=1, choices=STATUS_CHOICES, default='F', verbose_name='Status') review_room = models.CharField(max_length=255, null=True, blank=True, verbose_name='Review') class Meta: ordering = [\"number_room\"] class Registration(models.Model): TAKEN = 'T' BOOKED = 'B' PAID = 'YP' NO_PAID = 'NP' STATUS_REG_CHOICES = [ (TAKEN, 'Taken'), (BOOKED, 'Booked'), ] STATUS_PAY_CHOICES = [ (PAID, 'Paid for'), (NO_PAID, 'Not paid for'), ] id_reg = models.IntegerField(primary_key=True, verbose_name='ID Reg') id_employee = models.ForeignKey(Employee, on_delete=models.SET_NULL, null=True, verbose_name='ID Employee') id_guest = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, verbose_name='ID Guest') id_room = models.ForeignKey(Room, on_delete=models.SET_NULL, null=True, verbose_name='ID Room') status_reg = models.CharField(max_length=1, choices=STATUS_REG_CHOICES, verbose_name='Registration status') status_pay = models.CharField(max_length=2, choices=STATUS_PAY_CHOICES, verbose_name='Payment status') check_in = models.DateField(null=False, blank=False, verbose_name='Check in') check_out = models.DateField(null=False, blank=False, verbose_name='Check out') booking = models.DateField(null=False, blank=False, verbose_name='Booking date') class Meta: ordering = [\"-check_in\", \"-check_out\"] class Comment(models.Model): id_guest = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, verbose_name='ID Guest') id_room = models.ForeignKey(Room, on_delete=models.CASCADE, null=True, verbose_name='ID Room') username = models.CharField(max_length=30) rating_c = models.PositiveSmallIntegerField(validators=[MinValueValidator(1), MaxValueValidator(10)], verbose_name='Rating') review_c = models.TextField(max_length=255, null=True, blank=True, verbose_name='Review') check_in = models.DateField(null=False, blank=False, verbose_name='Check in') check_out = models.DateField(null=False, blank=False, verbose_name='Check out') urls.py from django.urls import path from .views import * urlpatterns = [ path('hotels/', HotelListView.as_view(), name='hotels'), path('hotels/<int:pk>/', HotelView.as_view(), name='hotel'), path('hotels/<int:id_hotel>/<int:id_rt>/rooms/', RoomListView.as_view(), name='hotel-rooms'), path('hotels/<int:id_hotel>/<int:id_rt>/rooms/<int:pk>/', RoomView.as_view(), name='room'), path('hotels/<int:id_hotel>/<int:id_rt>/rooms/<int:id_room>/comment/', CommentView.as_view(), name='comment'), path('reserve/', ReserveView.as_view(), name='reserve'), ] views.py from django.shortcuts import render, redirect from django.views.generic import CreateView, ListView, DetailView from .forms import * from .models import * class ReserveView(CreateView): form_class = ReserveForm template_name = 'reserve.html' def post(self, request, *args, **kwargs): form = ReserveForm(request.POST) if form.is_valid(): form.save() print(request) return redirect('hotels') return render(request, 'error.html') class CommentView(CreateView): form_class = CommentForm template_name = 'comment.html' def get_context_data(self, **kwargs): context = super(CommentView, self).get_context_data(**kwargs) context['hotel'] = Hotel.objects.get(pk=self.kwargs['id_hotel']) context['room_type'] = RoomType.objects.get(pk=self.kwargs['id_rt']) context['room'] = Room.objects.get(pk=self.kwargs['id_room']) return context def get(self, request, *args, **kwargs): form = CommentForm() context = {'form': form, 'hotel': Hotel.objects.get(pk=self.kwargs['id_hotel']), 'room_type': RoomType.objects.get(pk=self.kwargs['id_rt']), 'room': Room.objects.get(pk=self.kwargs['id_room'])} return render(request, 'comment.html', context) def post(self, request, *args, **kwargs): form = CommentForm(request.POST) if form.is_valid(): form.save() print(request) return redirect('room', id_hotel=self.kwargs['id_hotel'], id_rt=self.kwargs['id_rt'], pk=self.kwargs['id_room']) return render(request, 'error.html') class RoomView(DetailView): model = Room template_name = 'room.html' context_object_name = 'room' def get_context_data(self, **kwargs): context = super(RoomView, self).get_context_data(**kwargs) context['hotel'] = Hotel.objects.get(pk=self.kwargs['id_hotel']) context['room_type'] = RoomType.objects.get(pk=self.kwargs['id_rt']) context['comments'] = Comment.objects.filter(id_room=self.kwargs['pk']) return context class RoomListView(ListView): model = Room template_name = 'rooms.html' context_object_name = 'rooms' def get_context_data(self, **kwargs): context = super(RoomListView, self).get_context_data(**kwargs) context['hotel'] = Hotel.objects.get(pk=self.kwargs['id_hotel']) context['room_type'] = RoomType.objects.get(pk=self.kwargs['id_rt']) return context def get_queryset(self): return Room.objects.filter(id_rt=self.kwargs['id_rt']) class HotelView(DetailView): model = Hotel template_name = 'hotel.html' context_object_name = 'hotel' def get_context_data(self, **kwargs): context = super(HotelView, self).get_context_data(**kwargs) context['room_types'] = RoomType.objects.filter(id_hotel=self.kwargs['pk']) return context class HotelListView(ListView): model = Hotel template_name = 'hotels.html' context_object_name = 'hotels' def get_context_data(self, *, object_list=None, **kwargs): context = super(HotelListView, self).get_context_data(**kwargs) return context forms.py from django import forms from .models import Comment from .models import Registration class ReserveForm(forms.ModelForm): class Meta: model = Registration fields = ('id_reg', 'id_employee', 'id_guest', 'id_room', 'status_reg', 'status_pay', 'check_in', 'check_out', 'booking') class CommentForm(forms.ModelForm): class Meta: model = Comment fields = ('id_guest', 'id_room', 'username', 'rating_c', 'review_c', 'check_in', 'check_out')","title":"hotel_first_app"}]}